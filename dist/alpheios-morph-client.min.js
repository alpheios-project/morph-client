!function(e,t){if("object"==typeof exports&&"object"==typeof module)module.exports=t();else if("function"==typeof define&&define.amd)define([],t);else{var r=t();for(var n in r)("object"==typeof exports?exports:e)[n]=r[n]}}(window,function(){return function(e){var t={};function r(n){if(t[n])return t[n].exports;var a=t[n]={i:n,l:!1,exports:{}};return e[n].call(a.exports,a,a.exports,r),a.l=!0,a.exports}return r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:n})},r.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=6)}([function(e,t,r){var n;window,n=function(){return function(e){var t={};function r(n){if(t[n])return t[n].exports;var a=t[n]={i:n,l:!1,exports:{}};return e[n].call(a.exports,a,a.exports,r),a.l=!0,a.exports}return r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:n})},r.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s="./driver.js")}({"./arabic_language_model.js":
/*!**********************************!*\
  !*** ./arabic_language_model.js ***!
  \**********************************/
/*! exports provided: default */function(e,t,r){"use strict";r.r(t),r.d(t,"default",function(){return o});var n=r(/*! ./language_model.js */"./language_model.js"),a=r(/*! ./constants.js */"./constants.js");let u=new Map,s=!1;class o extends n.default{static get languageID(){return a.LANG_ARABIC}static get languageCode(){return a.STR_LANG_CODE_ARA}static get languageCodes(){return[a.STR_LANG_CODE_ARA,a.STR_LANG_CODE_AR]}static get contextForward(){return 0}static get contextBackward(){return 0}static get direction(){return a.LANG_DIR_RTL}static get baseUnit(){return a.LANG_UNIT_WORD}static get typeFeatures(){return s||this.initTypeFeatures(),u}static initTypeFeatures(){for(const e of this.featureNames)u.set(e,this.getFeature(e));s=!0}static canInflect(e){return!1}static alternateWordEncodings(e,t=null,r=null,n=null){let a=e.replace(/[\u{064B}\u{064C}\u{064D}\u{0640}]/gu,""),u=a.replace(/[\u{0622}\u{0623}\u{0625}]/gu,"ا"),s=u.replace(/[\u{064E}\u{064F}\u{0650}\u{0670}\u{0671}]/gu,""),o=s.replace(/\u{0651}/gu,""),i=o.replace(/\u{0652}/gu,""),l=i.replace(/\u{0627}/gu,""),d=new Map([["tanwin",a],["hamza",u],["harakat",s],["shadda",o],["sukun",i],["alef",l]]);return null!==n&&d.has(n)?[d.get(n)]:Array.from(d.values())}static getPunctuation(){return".,;:!?'\"(){}\\[\\]<>/\\ ‐‑‒–—―‘’“”··\n\r"}}},"./constants.js":
/*!**********************!*\
  !*** ./constants.js ***!
  \**********************/
/*! exports provided: LANG_UNIT_WORD, LANG_UNIT_CHAR, LANG_DIR_LTR, LANG_DIR_RTL, LANG_UNDEFINED, LANG_LATIN, LANG_GREEK, LANG_ARABIC, LANG_PERSIAN, STR_LANG_CODE_UNDEFINED, STR_LANG_CODE_LAT, STR_LANG_CODE_LA, STR_LANG_CODE_GRC, STR_LANG_CODE_ARA, STR_LANG_CODE_AR, STR_LANG_CODE_FAS, STR_LANG_CODE_PER, STR_LANG_CODE_FA_IR, STR_LANG_CODE_FA, POFS_ADJECTIVE, POFS_ADVERB, POFS_ADVERBIAL, POFS_ARTICLE, POFS_CONJUNCTION, POFS_EXCLAMATION, POFS_INTERJECTION, POFS_NOUN, POFS_NUMERAL, POFS_PARTICLE, POFS_PREFIX, POFS_PREPOSITION, POFS_PRONOUN, POFS_SUFFIX, POFS_SUPINE, POFS_VERB, POFS_VERB_PARTICIPLE, GEND_MASCULINE, GEND_FEMININE, GEND_NEUTER, GEND_COMMON, GEND_ANIMATE, GEND_INANIMATE, GEND_PERSONAL_MASCULINE, GEND_ANIMATE_MASCULINE, GEND_INANIMATE_MASCULINE, COMP_POSITIVE, COMP_COMPARITIVE, COMP_SUPERLATIVE, CASE_ABESSIVE, CASE_ABLATIVE, CASE_ABSOLUTIVE, CASE_ACCUSATIVE, CASE_ADDIRECTIVE, CASE_ADELATIVE, CASE_ADESSIVE, CASE_ADVERBIAL, CASE_ALLATIVE, CASE_ANTESSIVE, CASE_APUDESSIVE, CASE_AVERSIVE, CASE_BENEFACTIVE, CASE_CARITIVE, CASE_CAUSAL, CASE_CAUSAL_FINAL, CASE_COMITATIVE, CASE_DATIVE, CASE_DELATIVE, CASE_DIRECT, CASE_DISTRIBUTIVE, CASE_DISTRIBUTIVE_TEMPORAL, CASE_ELATIVE, CASE_ERGATIVE, CASE_ESSIVE, CASE_ESSIVE_FORMAL, CASE_ESSIVE_MODAL, CASE_EQUATIVE, CASE_EVITATIVE, CASE_EXESSIVE, CASE_FINAL, CASE_FORMAL, CASE_GENITIVE, CASE_ILLATIVE, CASE_INELATIVE, CASE_INESSIVE, CASE_INSTRUCTIVE, CASE_INSTRUMENTAL, CASE_INSTRUMENTAL_COMITATIVE, CASE_INTRANSITIVE, CASE_LATIVE, CASE_LOCATIVE, CASE_MODAL, CASE_MULTIPLICATIVE, CASE_NOMINATIVE, CASE_PARTITIVE, CASE_PEGATIVE, CASE_PERLATIVE, CASE_POSSESSIVE, CASE_POSTELATIVE, CASE_POSTDIRECTIVE, CASE_POSTESSIVE, CASE_POSTPOSITIONAL, CASE_PREPOSITIONAL, CASE_PRIVATIVE, CASE_PROLATIVE, CASE_PROSECUTIVE, CASE_PROXIMATIVE, CASE_SEPARATIVE, CASE_SOCIATIVE, CASE_SUBDIRECTIVE, CASE_SUBESSIVE, CASE_SUBELATIVE, CASE_SUBLATIVE, CASE_SUPERDIRECTIVE, CASE_SUPERESSIVE, CASE_SUPERLATIVE, CASE_SUPPRESSIVE, CASE_TEMPORAL, CASE_TERMINATIVE, CASE_TRANSLATIVE, CASE_VIALIS, CASE_VOCATIVE, MOOD_ADMIRATIVE, MOOD_COHORTATIVE, MOOD_CONDITIONAL, MOOD_DECLARATIVE, MOOD_DUBITATIVE, MOOD_ENERGETIC, MOOD_EVENTIVE, MOOD_GENERIC, MOOD_GERUNDIVE, MOOD_HYPOTHETICAL, MOOD_IMPERATIVE, MOOD_INDICATIVE, MOOD_INFERENTIAL, MOOD_INFINITIVE, MOOD_INTERROGATIVE, MOOD_JUSSIVE, MOOD_NEGATIVE, MOOD_OPTATIVE, MOOD_PARTICIPLE, MOOD_PRESUMPTIVE, MOOD_RENARRATIVE, MOOD_SUBJUNCTIVE, MOOD_SUPINE, NUM_SINGULAR, NUM_PLURAL, NUM_DUAL, NUM_TRIAL, NUM_PAUCAL, NUM_SINGULATIVE, NUM_COLLECTIVE, NUM_DISTRIBUTIVE_PLURAL, NRL_CARDINAL, NRL_ORDINAL, NRL_DISTRIBUTIVE, NURL_NUMERAL_ADVERB, ORD_1ST, ORD_2ND, ORD_3RD, ORD_4TH, ORD_5TH, ORD_6TH, ORD_7TH, ORD_8TH, ORD_9TH, TENSE_AORIST, TENSE_FUTURE, TENSE_FUTURE_PERFECT, TENSE_IMPERFECT, TENSE_PAST_ABSOLUTE, TENSE_PERFECT, TENSE_PLUPERFECT, TENSE_PRESENT, VKIND_TO_BE, VKIND_COMPOUNDS_OF_TO_BE, VKIND_TAKING_ABLATIVE, VKIND_TAKING_DATIVE, VKIND_TAKING_GENITIVE, VKIND_TRANSITIVE, VKIND_INTRANSITIVE, VKIND_IMPERSONAL, VKIND_DEPONENT, VKIND_SEMIDEPONENT, VKIND_PERFECT_DEFINITE, VOICE_ACTIVE, VOICE_PASSIVE, VOICE_MEDIOPASSIVE, VOICE_IMPERSONAL_PASSIVE, VOICE_MIDDLE, VOICE_ANTIPASSIVE, VOICE_REFLEXIVE, VOICE_RECIPROCAL, VOICE_CAUSATIVE, VOICE_ADJUTATIVE, VOICE_APPLICATIVE, VOICE_CIRCUMSTANTIAL, VOICE_DEPONENT, TYPE_IRREGULAR, TYPE_REGULAR, CLASS_PERSONAL, CLASS_REFLEXIVE, CLASS_POSSESSIVE, CLASS_DEMONSTRATIVE, CLASS_RELATIVE, CLASS_INTERROGATIVE, CLASS_GENERAL_RELATIVE, CLASS_INDEFINITE, CLASS_INTENSIVE, CLASS_RECIPROCAL */function(e,t,r){"use strict";r.r(t),r.d(t,"LANG_UNIT_WORD",function(){return n}),r.d(t,"LANG_UNIT_CHAR",function(){return a}),r.d(t,"LANG_DIR_LTR",function(){return u}),r.d(t,"LANG_DIR_RTL",function(){return s}),r.d(t,"LANG_UNDEFINED",function(){return o}),r.d(t,"LANG_LATIN",function(){return i}),r.d(t,"LANG_GREEK",function(){return l}),r.d(t,"LANG_ARABIC",function(){return d}),r.d(t,"LANG_PERSIAN",function(){return c}),r.d(t,"STR_LANG_CODE_UNDEFINED",function(){return f}),r.d(t,"STR_LANG_CODE_LAT",function(){return g}),r.d(t,"STR_LANG_CODE_LA",function(){return p}),r.d(t,"STR_LANG_CODE_GRC",function(){return m}),r.d(t,"STR_LANG_CODE_ARA",function(){return h}),r.d(t,"STR_LANG_CODE_AR",function(){return E}),r.d(t,"STR_LANG_CODE_FAS",function(){return _}),r.d(t,"STR_LANG_CODE_PER",function(){return I}),r.d(t,"STR_LANG_CODE_FA_IR",function(){return A}),r.d(t,"STR_LANG_CODE_FA",function(){return y}),r.d(t,"POFS_ADJECTIVE",function(){return S}),r.d(t,"POFS_ADVERB",function(){return C}),r.d(t,"POFS_ADVERBIAL",function(){return O}),r.d(t,"POFS_ARTICLE",function(){return D}),r.d(t,"POFS_CONJUNCTION",function(){return v}),r.d(t,"POFS_EXCLAMATION",function(){return w}),r.d(t,"POFS_INTERJECTION",function(){return T}),r.d(t,"POFS_NOUN",function(){return L}),r.d(t,"POFS_NUMERAL",function(){return N}),r.d(t,"POFS_PARTICLE",function(){return F}),r.d(t,"POFS_PREFIX",function(){return R}),r.d(t,"POFS_PREPOSITION",function(){return V}),r.d(t,"POFS_PRONOUN",function(){return P}),r.d(t,"POFS_SUFFIX",function(){return $}),r.d(t,"POFS_SUPINE",function(){return b}),r.d(t,"POFS_VERB",function(){return U}),r.d(t,"POFS_VERB_PARTICIPLE",function(){return M}),r.d(t,"GEND_MASCULINE",function(){return j}),r.d(t,"GEND_FEMININE",function(){return x}),r.d(t,"GEND_NEUTER",function(){return G}),r.d(t,"GEND_COMMON",function(){return k}),r.d(t,"GEND_ANIMATE",function(){return B}),r.d(t,"GEND_INANIMATE",function(){return W}),r.d(t,"GEND_PERSONAL_MASCULINE",function(){return q}),r.d(t,"GEND_ANIMATE_MASCULINE",function(){return X}),r.d(t,"GEND_INANIMATE_MASCULINE",function(){return H}),r.d(t,"COMP_POSITIVE",function(){return K}),r.d(t,"COMP_COMPARITIVE",function(){return z}),r.d(t,"COMP_SUPERLATIVE",function(){return J}),r.d(t,"CASE_ABESSIVE",function(){return Q}),r.d(t,"CASE_ABLATIVE",function(){return Y}),r.d(t,"CASE_ABSOLUTIVE",function(){return Z}),r.d(t,"CASE_ACCUSATIVE",function(){return ee}),r.d(t,"CASE_ADDIRECTIVE",function(){return te}),r.d(t,"CASE_ADELATIVE",function(){return re}),r.d(t,"CASE_ADESSIVE",function(){return ne}),r.d(t,"CASE_ADVERBIAL",function(){return ae}),r.d(t,"CASE_ALLATIVE",function(){return ue}),r.d(t,"CASE_ANTESSIVE",function(){return se}),r.d(t,"CASE_APUDESSIVE",function(){return oe}),r.d(t,"CASE_AVERSIVE",function(){return ie}),r.d(t,"CASE_BENEFACTIVE",function(){return le}),r.d(t,"CASE_CARITIVE",function(){return de}),r.d(t,"CASE_CAUSAL",function(){return ce}),r.d(t,"CASE_CAUSAL_FINAL",function(){return fe}),r.d(t,"CASE_COMITATIVE",function(){return ge}),r.d(t,"CASE_DATIVE",function(){return pe}),r.d(t,"CASE_DELATIVE",function(){return me}),r.d(t,"CASE_DIRECT",function(){return he}),r.d(t,"CASE_DISTRIBUTIVE",function(){return Ee}),r.d(t,"CASE_DISTRIBUTIVE_TEMPORAL",function(){return _e}),r.d(t,"CASE_ELATIVE",function(){return Ie}),r.d(t,"CASE_ERGATIVE",function(){return Ae}),r.d(t,"CASE_ESSIVE",function(){return ye}),r.d(t,"CASE_ESSIVE_FORMAL",function(){return Se}),r.d(t,"CASE_ESSIVE_MODAL",function(){return Ce}),r.d(t,"CASE_EQUATIVE",function(){return Oe}),r.d(t,"CASE_EVITATIVE",function(){return De}),r.d(t,"CASE_EXESSIVE",function(){return ve}),r.d(t,"CASE_FINAL",function(){return we}),r.d(t,"CASE_FORMAL",function(){return Te}),r.d(t,"CASE_GENITIVE",function(){return Le}),r.d(t,"CASE_ILLATIVE",function(){return Ne}),r.d(t,"CASE_INELATIVE",function(){return Fe}),r.d(t,"CASE_INESSIVE",function(){return Re}),r.d(t,"CASE_INSTRUCTIVE",function(){return Ve}),r.d(t,"CASE_INSTRUMENTAL",function(){return Pe}),r.d(t,"CASE_INSTRUMENTAL_COMITATIVE",function(){return $e}),r.d(t,"CASE_INTRANSITIVE",function(){return be}),r.d(t,"CASE_LATIVE",function(){return Ue}),r.d(t,"CASE_LOCATIVE",function(){return Me}),r.d(t,"CASE_MODAL",function(){return je}),r.d(t,"CASE_MULTIPLICATIVE",function(){return xe}),r.d(t,"CASE_NOMINATIVE",function(){return Ge}),r.d(t,"CASE_PARTITIVE",function(){return ke}),r.d(t,"CASE_PEGATIVE",function(){return Be}),r.d(t,"CASE_PERLATIVE",function(){return We}),r.d(t,"CASE_POSSESSIVE",function(){return qe}),r.d(t,"CASE_POSTELATIVE",function(){return Xe}),r.d(t,"CASE_POSTDIRECTIVE",function(){return He}),r.d(t,"CASE_POSTESSIVE",function(){return Ke}),r.d(t,"CASE_POSTPOSITIONAL",function(){return ze}),r.d(t,"CASE_PREPOSITIONAL",function(){return Je}),r.d(t,"CASE_PRIVATIVE",function(){return Qe}),r.d(t,"CASE_PROLATIVE",function(){return Ye}),r.d(t,"CASE_PROSECUTIVE",function(){return Ze}),r.d(t,"CASE_PROXIMATIVE",function(){return et}),r.d(t,"CASE_SEPARATIVE",function(){return tt}),r.d(t,"CASE_SOCIATIVE",function(){return rt}),r.d(t,"CASE_SUBDIRECTIVE",function(){return nt}),r.d(t,"CASE_SUBESSIVE",function(){return at}),r.d(t,"CASE_SUBELATIVE",function(){return ut}),r.d(t,"CASE_SUBLATIVE",function(){return st}),r.d(t,"CASE_SUPERDIRECTIVE",function(){return ot}),r.d(t,"CASE_SUPERESSIVE",function(){return it}),r.d(t,"CASE_SUPERLATIVE",function(){return lt}),r.d(t,"CASE_SUPPRESSIVE",function(){return dt}),r.d(t,"CASE_TEMPORAL",function(){return ct}),r.d(t,"CASE_TERMINATIVE",function(){return ft}),r.d(t,"CASE_TRANSLATIVE",function(){return gt}),r.d(t,"CASE_VIALIS",function(){return pt}),r.d(t,"CASE_VOCATIVE",function(){return mt}),r.d(t,"MOOD_ADMIRATIVE",function(){return ht}),r.d(t,"MOOD_COHORTATIVE",function(){return Et}),r.d(t,"MOOD_CONDITIONAL",function(){return _t}),r.d(t,"MOOD_DECLARATIVE",function(){return It}),r.d(t,"MOOD_DUBITATIVE",function(){return At}),r.d(t,"MOOD_ENERGETIC",function(){return yt}),r.d(t,"MOOD_EVENTIVE",function(){return St}),r.d(t,"MOOD_GENERIC",function(){return Ct}),r.d(t,"MOOD_GERUNDIVE",function(){return Ot}),r.d(t,"MOOD_HYPOTHETICAL",function(){return Dt}),r.d(t,"MOOD_IMPERATIVE",function(){return vt}),r.d(t,"MOOD_INDICATIVE",function(){return wt}),r.d(t,"MOOD_INFERENTIAL",function(){return Tt}),r.d(t,"MOOD_INFINITIVE",function(){return Lt}),r.d(t,"MOOD_INTERROGATIVE",function(){return Nt}),r.d(t,"MOOD_JUSSIVE",function(){return Ft}),r.d(t,"MOOD_NEGATIVE",function(){return Rt}),r.d(t,"MOOD_OPTATIVE",function(){return Vt}),r.d(t,"MOOD_PARTICIPLE",function(){return Pt}),r.d(t,"MOOD_PRESUMPTIVE",function(){return $t}),r.d(t,"MOOD_RENARRATIVE",function(){return bt}),r.d(t,"MOOD_SUBJUNCTIVE",function(){return Ut}),r.d(t,"MOOD_SUPINE",function(){return Mt}),r.d(t,"NUM_SINGULAR",function(){return jt}),r.d(t,"NUM_PLURAL",function(){return xt}),r.d(t,"NUM_DUAL",function(){return Gt}),r.d(t,"NUM_TRIAL",function(){return kt}),r.d(t,"NUM_PAUCAL",function(){return Bt}),r.d(t,"NUM_SINGULATIVE",function(){return Wt}),r.d(t,"NUM_COLLECTIVE",function(){return qt}),r.d(t,"NUM_DISTRIBUTIVE_PLURAL",function(){return Xt}),r.d(t,"NRL_CARDINAL",function(){return Ht}),r.d(t,"NRL_ORDINAL",function(){return Kt}),r.d(t,"NRL_DISTRIBUTIVE",function(){return zt}),r.d(t,"NURL_NUMERAL_ADVERB",function(){return Jt}),r.d(t,"ORD_1ST",function(){return Qt}),r.d(t,"ORD_2ND",function(){return Yt}),r.d(t,"ORD_3RD",function(){return Zt}),r.d(t,"ORD_4TH",function(){return er}),r.d(t,"ORD_5TH",function(){return tr}),r.d(t,"ORD_6TH",function(){return rr}),r.d(t,"ORD_7TH",function(){return nr}),r.d(t,"ORD_8TH",function(){return ar}),r.d(t,"ORD_9TH",function(){return ur}),r.d(t,"TENSE_AORIST",function(){return sr}),r.d(t,"TENSE_FUTURE",function(){return or}),r.d(t,"TENSE_FUTURE_PERFECT",function(){return ir}),r.d(t,"TENSE_IMPERFECT",function(){return lr}),r.d(t,"TENSE_PAST_ABSOLUTE",function(){return dr}),r.d(t,"TENSE_PERFECT",function(){return cr}),r.d(t,"TENSE_PLUPERFECT",function(){return fr}),r.d(t,"TENSE_PRESENT",function(){return gr}),r.d(t,"VKIND_TO_BE",function(){return pr}),r.d(t,"VKIND_COMPOUNDS_OF_TO_BE",function(){return mr}),r.d(t,"VKIND_TAKING_ABLATIVE",function(){return hr}),r.d(t,"VKIND_TAKING_DATIVE",function(){return Er}),r.d(t,"VKIND_TAKING_GENITIVE",function(){return _r}),r.d(t,"VKIND_TRANSITIVE",function(){return Ir}),r.d(t,"VKIND_INTRANSITIVE",function(){return Ar}),r.d(t,"VKIND_IMPERSONAL",function(){return yr}),r.d(t,"VKIND_DEPONENT",function(){return Sr}),r.d(t,"VKIND_SEMIDEPONENT",function(){return Cr}),r.d(t,"VKIND_PERFECT_DEFINITE",function(){return Or}),r.d(t,"VOICE_ACTIVE",function(){return Dr}),r.d(t,"VOICE_PASSIVE",function(){return vr}),r.d(t,"VOICE_MEDIOPASSIVE",function(){return wr}),r.d(t,"VOICE_IMPERSONAL_PASSIVE",function(){return Tr}),r.d(t,"VOICE_MIDDLE",function(){return Lr}),r.d(t,"VOICE_ANTIPASSIVE",function(){return Nr}),r.d(t,"VOICE_REFLEXIVE",function(){return Fr}),r.d(t,"VOICE_RECIPROCAL",function(){return Rr}),r.d(t,"VOICE_CAUSATIVE",function(){return Vr}),r.d(t,"VOICE_ADJUTATIVE",function(){return Pr}),r.d(t,"VOICE_APPLICATIVE",function(){return $r}),r.d(t,"VOICE_CIRCUMSTANTIAL",function(){return br}),r.d(t,"VOICE_DEPONENT",function(){return Ur}),r.d(t,"TYPE_IRREGULAR",function(){return Mr}),r.d(t,"TYPE_REGULAR",function(){return jr}),r.d(t,"CLASS_PERSONAL",function(){return xr}),r.d(t,"CLASS_REFLEXIVE",function(){return Gr}),r.d(t,"CLASS_POSSESSIVE",function(){return kr}),r.d(t,"CLASS_DEMONSTRATIVE",function(){return Br}),r.d(t,"CLASS_RELATIVE",function(){return Wr}),r.d(t,"CLASS_INTERROGATIVE",function(){return qr}),r.d(t,"CLASS_GENERAL_RELATIVE",function(){return Xr}),r.d(t,"CLASS_INDEFINITE",function(){return Hr}),r.d(t,"CLASS_INTENSIVE",function(){return Kr}),r.d(t,"CLASS_RECIPROCAL",function(){return zr});const n=Symbol("word"),a=Symbol("char"),u=Symbol("ltr"),s=Symbol("rtl"),o=Symbol("undefined"),i=Symbol("latin"),l=Symbol("greek"),d=Symbol("arabic"),c=Symbol("persian"),f="undefined",g="lat",p="la",m="grc",h="ara",E="ar",_="fas",I="per",A="fa-IR",y="fa",S="adjective",C="adverb",O="adverbial",D="article",v="conjunction",w="exclamation",T="interjection",L="noun",N="numeral",F="particle",R="prefix",V="preposition",P="pronoun",$="suffix",b="supine",U="verb",M="verb participle",j="masculine",x="feminine",G="neuter",k="common",B="animate",W="inanimate",q="personal masculine",X="animate masculine",H="inanimate masculine",K="positive",z="comparative",J="superlative",Q="abessive",Y="ablative",Z="absolutive",ee="accusative",te="addirective",re="adelative",ne="adessive",ae="adverbial",ue="allative",se="antessive",oe="apudessive",ie="aversive",le="benefactive",de="caritive",ce="causal",fe="causal-final",ge="comitative",pe="dative",me="delative",he="direct",Ee="distributive",_e="distributive-temporal",Ie="elative",Ae="ergative",ye="essive",Se="essive-formal",Ce="essive-modal",Oe="equative",De="evitative",ve="exessive",we="final",Te="formal",Le="genitive",Ne="illative",Fe="inelative",Re="inessive",Ve="instructive",Pe="instrumental",$e="instrumental-comitative",be="intransitive",Ue="lative",Me="locative",je="modal",xe="multiplicative",Ge="nominative",ke="partitive",Be="pegative",We="perlative",qe="possessive",Xe="postelative",He="postdirective",Ke="postessive",ze="postpositional",Je="prepositional",Qe="privative",Ye="prolative",Ze="prosecutive",et="proximative",tt="separative",rt="sociative",nt="subdirective",at="subessive",ut="subelative",st="sublative",ot="superdirective",it="superessive",lt="superlative",dt="suppressive",ct="temporal",ft="terminative",gt="translative",pt="vialis",mt="vocative",ht="admirative",Et="cohortative",_t="conditional",It="declarative",At="dubitative",yt="energetic",St="eventive",Ct="generic",Ot="gerundive",Dt="hypothetical",vt="imperative",wt="indicative",Tt="inferential",Lt="infinitive",Nt="interrogative",Ft="jussive",Rt="negative",Vt="optative",Pt="participle",$t="presumptive",bt="renarrative",Ut="subjunctive",Mt="supine",jt="singular",xt="plural",Gt="dual",kt="trial",Bt="paucal",Wt="singulative",qt="collective",Xt="distributive plural",Ht="cardinal",Kt="ordinal",zt="distributive",Jt="numeral adverb",Qt="1st",Yt="2nd",Zt="3rd",er="4th",tr="5th",rr="6th",nr="7th",ar="8th",ur="9th",sr="aorist",or="future",ir="future perfect",lr="imperfect",dr="past absolute",cr="perfect",fr="pluperfect",gr="present",pr="to be",mr="compounds of to be",hr="taking ablative",Er="taking dative",_r="taking genitive",Ir="transitive",Ar="intransitive",yr="impersonal",Sr="deponent",Cr="semideponent",Or="perfect definite",Dr="active",vr="passive",wr="mediopassive",Tr="impersonal passive",Lr="middle",Nr="antipassive",Fr="reflexive",Rr="reciprocal",Vr="causative",Pr="adjutative",$r="applicative",br="circumstantial",Ur="deponent",Mr="irregular",jr="regular",xr="personal",Gr="reflexive",kr="possessive",Br="demonstrative",Wr="relative",qr="interrogative",Xr="general relative",Hr="indefinite",Kr="intensive",zr="reciprocal"},"./definition-set.js":
/*!***************************!*\
  !*** ./definition-set.js ***!
  \***************************/
/*! exports provided: default */function(e,t,r){"use strict";r.r(t),r.d(t,"default",function(){return a});var n=r(/*! ./definition */"./definition.js");class a{constructor(e,t){this.lemmaWord=e,this.languageID=t,this.shortDefs=[],this.fullDefs=[]}static readObject(e){let t=new a(e.lemmaWord,e.languageID);for(let r of e.shortDefs)t.shortDefs.push(n.default.readObject(r));for(let r of e.fullDefs)t.fullDefs.push(n.default.readObject(r));return t}isEmpty(){return 0===this.shortDefs.length&&0===this.fullDefs.length}appendShortDefs(e){return e&&(Array.isArray(e)||(e=[e]),this.shortDefs=this.shortDefs.concat(e)),this.shortDefs}clearShortDefs(){this.shortDefs=[]}appendFullDefs(e){return e&&(Array.isArray(e)||(e=[e]),this.fullDefs=this.fullDefs.concat(e)),this.fullDefs}clearFullDefs(){this.fullDefs=[]}}},"./definition.js":
/*!***********************!*\
  !*** ./definition.js ***!
  \***********************/
/*! exports provided: default */function(e,t,r){"use strict";r.r(t);class n{constructor(e,t,r,n){this.text=e,this.language=t,this.format=r,this.lemmaText=n}static readObject(e){return new n(e.text,e.language,e.format,e.lemmaText)}}t.default=n},"./driver.js":
/*!*******************!*\
  !*** ./driver.js ***!
  \*******************/
/*! exports provided: Constants, Definition, DefinitionSet, Feature, GrmFeature, FeatureType, FeatureList, FeatureImporter, Inflection, LanguageModelFactory, Homonym, Lexeme, Lemma, LatinLanguageModel, GreekLanguageModel, ArabicLanguageModel, PersianLanguageModel, ResourceProvider */function(e,t,r){"use strict";r.r(t);var n=r(/*! ./constants.js */"./constants.js");r.d(t,"Constants",function(){return n});var a=r(/*! ./definition.js */"./definition.js");r.d(t,"Definition",function(){return a.default});var u=r(/*! ./definition-set */"./definition-set.js");r.d(t,"DefinitionSet",function(){return u.default});var s=r(/*! ./feature.js */"./feature.js");r.d(t,"Feature",function(){return s.default});var o=r(/*! ./grm-feature.js */"./grm-feature.js");r.d(t,"GrmFeature",function(){return o.default});var i=r(/*! ./feature_type.js */"./feature_type.js");r.d(t,"FeatureType",function(){return i.default});var l=r(/*! ./feature_list.js */"./feature_list.js");r.d(t,"FeatureList",function(){return l.default});var d=r(/*! ./feature_importer.js */"./feature_importer.js");r.d(t,"FeatureImporter",function(){return d.default});var c=r(/*! ./language_model_factory.js */"./language_model_factory.js");r.d(t,"LanguageModelFactory",function(){return c.default});var f=r(/*! ./homonym.js */"./homonym.js");r.d(t,"Homonym",function(){return f.default});var g=r(/*! ./lexeme.js */"./lexeme.js");r.d(t,"Lexeme",function(){return g.default});var p=r(/*! ./lemma.js */"./lemma.js");r.d(t,"Lemma",function(){return p.default});var m=r(/*! ./inflection.js */"./inflection.js");r.d(t,"Inflection",function(){return m.default});var h=r(/*! ./latin_language_model.js */"./latin_language_model.js");r.d(t,"LatinLanguageModel",function(){return h.default});var E=r(/*! ./greek_language_model.js */"./greek_language_model.js");r.d(t,"GreekLanguageModel",function(){return E.default});var _=r(/*! ./arabic_language_model.js */"./arabic_language_model.js");r.d(t,"ArabicLanguageModel",function(){return _.default});var I=r(/*! ./persian_language_model.js */"./persian_language_model.js");r.d(t,"PersianLanguageModel",function(){return I.default});var A=r(/*! ./resource_provider.js */"./resource_provider.js");r.d(t,"ResourceProvider",function(){return A.default})},"./feature.js":
/*!********************!*\
  !*** ./feature.js ***!
  \********************/
/*! exports provided: default */function(e,t,r){"use strict";r.r(t),r.d(t,"default",function(){return s});var n=r(/*! ./language_model_factory.js */"./language_model_factory.js"),a=r(/*! ./feature_importer.js */"./feature_importer.js"),u=r(/*! ./i18n.js */"./i18n.js");class s{constructor(e,t,r,n=1,a=[]){if(!s.isAllowedType(e))throw new Error('Features of "'+e+'" type are not supported.');if(!t)throw new Error("Feature should have a non-empty value(s).");if(!r)throw new Error("No language ID is provided");this.type=e,this.languageID=r,this.sortOrder=n,this.allowedValues=a,this._data=s.dataValuesFromInput(t),this.sort()}static dataValuesFromInput(e){let t;return(t=Array.isArray(e)?Array.isArray(e[0])?e:e.map((e,t)=>[e,t+1]):[[e,this.defaultSortOrder]]).map(e=>({value:e[0],sortOrder:Number.parseInt(e[1])}))}static newFromFtr(e){}static get types(){return{word:"word",fullForm:"full form",hdwd:"headword",part:"part of speech",number:"number",case:"case",grmCase:"case",declension:"declension",gender:"gender",type:"type",class:"class",grmClass:"class",conjugation:"conjugation",comparison:"comparison",tense:"tense",voice:"voice",mood:"mood",person:"person",frequency:"frequency",meaning:"meaning",source:"source",footnote:"footnote",dialect:"dialect",note:"note",pronunciation:"pronunciation",age:"age",area:"area",geo:"geo",kind:"kind",derivtype:"derivtype",stemtype:"stemtype",morph:"morph",var:"var"}}static isAllowedType(e){return Object.values(this.types).includes(`${e}`)}static get defaultSortOrder(){return 1}static get joinSeparator(){return" "}static get defaultImporterName(){return"default"}get allowsUnrestrictedValues(){return 0===this.allowedValues.length}sort(){this._data.sort((e,t)=>e.sortOrder!==t.sortOrder?e.sortOrder-t.sortOrder:e.value.localeCompare(t.value))}get items(){return this._data}get value(){return this.values.join(this.constructor.joinSeparator)}get values(){return this._data.map(e=>e.value)}getValue(e){return this._data.find(t=>t.value===e)}get valQty(){return this._data.length}get isEmpty(){return 0===this.valQty}get isSingle(){return 1===this.valQty}get isMultiple(){return this.valQty>1}toString(){return this.value}hasValue(e){return this.values.includes(e)}hasValues(e){let t=!0;for(let r of e)t=t&&this.hasValue(r);return t}hasSomeValues(e){let t=!1;for(let r of e)t=t||this.hasValue(r);return t}get valuesUnrestricted(){return 0===this.allowedValues.length}isEqual(e){return this.type===e.type&&n.default.compareLanguages(this.languageID,e.languageID)&&this.value===e.value}addValue(e,t=this.constructor.defaultSortOrder){return this.hasValue(e)?console.warn(`Value "${e} already exists. If you want to change it, use "getValue" to access it directly.`):(this._data.push({value:e,sortOrder:t}),this.sort()),this}addValues(e){let t=this.constructor.dataValuesFromInput(e),r=t.map(e=>e.value);return this.hasValue(r)?console.warn(`One or several values from "${r} already exist. If you want to change it, use "getValue" to access a value directly.`):(this._data=this._data.concat(t),this.sort()),this}removeValue(e){console.warn("This feature is not implemented yet")}createFeature(e,t=this.constructor.defaultSortOrder){return new s(this.type,[[e,t]],this.languageID,this.sortOrder,this.allowedValues)}createFeatures(e){return new s(this.type,e,this.languageID,this.sortOrder,this.allowedValues)}getCopy(){let e=this._data.map(e=>[e.value,e.sortOrder]);return new s(this.type,e,this.languageID,this.sortOrder,this.allowedValues.slice())}toLocaleStringAbbr(e="en"){return this.values.map(t=>u.i18n[e][t].abbr)}addImporter(e=new a.default,t=this.constructor.defaultImporterName){return this.importers||(this.importers=new Map),this.importers.set(t,e),e}getImporter(e=this.constructor.defaultImporterName){if(!this.importers||!this.importers.has(e))throw new Error(`Importer "${e}" does not exist`);return this.importers.get(e)}addFromImporter(e,t=this.constructor.defaultImporterName){if(!this.importers||!this.importers.has(t))throw new Error(`Importer "${t}" does not exist`);const r=this.importers.get(t);return e=this.constructor.dataValuesFromInput(e),this._data.push(...e.map(e=>({value:r.get(e.value),sortOrder:e.sortOrder}))),this.sort(),this}createFromImporter(e,t=this.constructor.defaultImporterName){if(!this.importers||!this.importers.has(t))throw new Error(`Importer "${t}" does not exist`);const r=this.importers.get(t);Array.isArray(e)||(e=[e]);let n=e.map(e=>r.get(e));return n=n.reduce((e,t)=>e.concat(t),[]),new s(this.type,n,this.languageID,this.sortOrder,this.allowedValues)}}},"./feature_importer.js":
/*!*****************************!*\
  !*** ./feature_importer.js ***!
  \*****************************/
/*! exports provided: default */function(e,t,r){"use strict";r.r(t);t.default=class{constructor(e=[],t=!1){this.hash={};for(let t of e)this.map(t,t);return this.returnUnknown=t,this}map(e,t){if(!e)throw new Error("Imported value should not be empty.");if(!t)throw new Error("Library value should not be empty.");return this.hash[e]=t,this}has(e){return this.hash.hasOwnProperty(e)}get(e){if(this.has(e))return this.hash[e];if(this.returnUnknown)return e;throw new Error('A value "'+e+'" is not found in the importer.')}}},"./feature_list.js":
/*!*************************!*\
  !*** ./feature_list.js ***!
  \*************************/
/*! exports provided: default */function(e,t,r){"use strict";r.r(t);t.default=class{constructor(e=[]){this._features=[],this._types={},this.add(e)}add(e){if(!e||!Array.isArray(e))throw new Error("Features must be defined and must come in an array.");for(let t of e)this._features.push(t),this._types[t.type]=t}get items(){return this._features}forEach(e){this._features.forEach(e)}ofType(e){if(this.hasType(e))return this._types[e]}hasType(e){return this._types.hasOwnProperty(e)}}},"./feature_type.js":
/*!*************************!*\
  !*** ./feature_type.js ***!
  \*************************/
/*! exports provided: default */function(e,t,r){"use strict";r.r(t);var n=r(/*! ./feature.js */"./feature.js"),a=r(/*! ./feature_importer.js */"./feature_importer.js"),u=r(/*! ./language_model_factory */"./language_model_factory.js");class s{constructor(e,t,r){if(!t||!Array.isArray(t))throw new Error("Values should be an array (or an empty array) of values.");if(!r)throw new Error("FeatureType constructor requires a language");this.type=e,this.languageID=void 0,this.languageCode=void 0,({languageID:this.languageID,languageCode:this.languageCode}=u.default.getLanguageAttrs(r)),this._orderIndex=[],this._orderLookup={};for(const[e,r]of t.entries())if(this._orderIndex.push(r),Array.isArray(r))for(let t of r)this[t]=new n.default(this.type,t,this.languageID),this._orderLookup[t]=e;else this[r]=new n.default(this.type,r,this.languageID),this._orderLookup[r]=e}get language(){return console.warn('Please use a "languageID" instead of a "language"'),this.languageCode}hasUnrestrictedValue(){return 1===this.orderedValues.length&&this.orderedValues[0]===s.UNRESTRICTED_VALUE}get(e,t=1){if(e)return new n.default(this.type,[[e,t]],this.languageID);throw new Error("A non-empty value should be provided.")}getValues(e){return new n.default(this.type,e,this.languageID)}getFromImporter(e,t){let r;try{r=this.importer[e].get(t)}catch(e){r=this.get(t)}return r}addImporter(e){if(!e)throw new Error("Importer should have a non-empty name.");return this.importer=this.importer||{},this.importer[e]=this.importer[e]||new a.default,this.importer[e]}get orderedFeatures(){return this.orderedValues.map(e=>new n.default(this.type,e,this.languageID))}get orderedValues(){return this._orderIndex}get orderLookup(){return this._orderLookup}set order(e){if(!e||Array.isArray(e)&&0===e.length)throw new Error("A non-empty list of values should be provided.");Array.isArray(e)||(e=[e]);for(let t of e)if(Array.isArray(t))for(let e of t){if(!this.hasOwnProperty(e.value))throw new Error('Trying to order an element with "'+e.value+'" value that is not stored in a "'+this.type+'" type.');if(e.type!==this.type)throw new Error('Trying to order an element with type "'+e.type+'" that is different from "'+this.type+'".');if(!u.default.compareLanguages(e.languageID,this.languageID))throw new Error(`Trying to order an element with language "${e.languageID.toString()}" that is different from "${this.languageID.toString()}"`)}else{if(!this.hasOwnProperty(t.value))throw new Error('Trying to order an element with "'+t.value+'" value that is not stored in a "'+this.type+'" type.');if(t.type!==this.type)throw new Error('Trying to order an element with type "'+t.type+'" that is different from "'+this.type+'".');if(!u.default.compareLanguages(t.languageID,this.languageID))throw new Error(`Trying to order an element with language "${t.languageID.toString()}" that is different from "${this.languageID.toString()}"`)}this._orderLookup={},this._orderIndex=[];for(const[t,r]of e.entries())if(Array.isArray(r)){let e=[];for(const n of r)this._orderLookup[n.value]=t,e.push(n.value);this._orderIndex[t]=e}else this._orderLookup[r.value]=t,this._orderIndex[t]=r.value}}s.UNRESTRICTED_VALUE=Symbol("unrestricted"),t.default=s},"./greek_language_model.js":
/*!*********************************!*\
  !*** ./greek_language_model.js ***!
  \*********************************/
/*! exports provided: default */function(e,t,r){"use strict";r.r(t),r.d(t,"default",function(){return l});var n=r(/*! ./language_model.js */"./language_model.js"),a=r(/*! ./language_model_factory.js */"./language_model_factory.js"),u=r(/*! ./constants.js */"./constants.js"),s=r(/*! ./feature.js */"./feature.js");let o=new Map,i=!1;class l extends n.default{static get languageID(){return u.LANG_GREEK}static get languageCode(){return u.STR_LANG_CODE_GRC}static get languageCodes(){return[u.STR_LANG_CODE_GRC]}static get contextForward(){return 0}static get contextBackward(){return 0}static get direction(){return u.LANG_DIR_LTR}static get baseUnit(){return u.LANG_UNIT_WORD}static get featureValues(){return new Map([...n.default.featureValues,[s.default.types.grmClass,[u.CLASS_DEMONSTRATIVE,u.CLASS_GENERAL_RELATIVE,u.CLASS_INDEFINITE,u.CLASS_INTENSIVE,u.CLASS_INTERROGATIVE,u.CLASS_PERSONAL,u.CLASS_POSSESSIVE,u.CLASS_RECIPROCAL,u.CLASS_REFLEXIVE,u.CLASS_RELATIVE]],[s.default.types.number,[u.NUM_SINGULAR,u.NUM_PLURAL,u.NUM_DUAL]],[s.default.types.grmCase,[u.CASE_NOMINATIVE,u.CASE_GENITIVE,u.CASE_DATIVE,u.CASE_ACCUSATIVE,u.CASE_VOCATIVE]],[s.default.types.declension,[u.ORD_1ST,u.ORD_2ND,u.ORD_3RD]],[s.default.types.tense,[u.TENSE_PRESENT,u.TENSE_IMPERFECT,u.TENSE_FUTURE,u.TENSE_PERFECT,u.TENSE_PLUPERFECT,u.TENSE_FUTURE_PERFECT,u.TENSE_AORIST]],[s.default.types.voice,[u.VOICE_PASSIVE,u.VOICE_ACTIVE,u.VOICE_MEDIOPASSIVE,u.VOICE_MIDDLE]],[s.default.types.mood,[u.MOOD_INDICATIVE,u.MOOD_SUBJUNCTIVE,u.MOOD_OPTATIVE,u.MOOD_IMPERATIVE]],[s.default.types.dialect,["attic","epic","doric"]]])}static get typeFeatures(){return i||this.initTypeFeatures(),o}static initTypeFeatures(){for(const e of this.featureNames)o.set(e,this.getFeature(e));i=!0}static canInflect(e){return!0}static grammarFeatures(){return[s.default.types.part,s.default.types.grmCase,s.default.types.mood,s.default.types.declension,s.default.types.tense,s.default.types.voice]}static normalizeWord(e){return e?e.normalize("NFC"):e}static alternateWordEncodings(e,t=null,r=null,n=null){let a=l.normalizeWord(e).toLocaleLowerCase(),u=a.replace(/[\u{1FB0}\u{1FB1}]/gu,"α").replace(/[\u{1FB8}\u{1FB9}]/gu,"Α").replace(/[\u{1FD0}\u{1FD1}]/gu,"ι").replace(/[\u{1FD8}\u{1FD9}]/gu,"Ι").replace(/[\u{1FE0}\u{1FE1}]/gu,"υ").replace(/[\u{1FE8}\u{1FE9}]/gu,"Υ").replace(/[\u{00AF}\u{0304}\u{0306}]/gu,""),s=a.replace(/\u{0390}/gu,"ί").replace(/\u{03AA}/gu,"Ι").replace(/\u{03AB}/gu,"Υ").replace(/\u{03B0}/gu,"ύ").replace(/\u{03CA}/gu,"ι").replace(/\u{03CB}/gu,"υ").replace(/\u{1FD2}/gu,"ὶ").replace(/\u{1FD3}/gu,"ί").replace(/\u{1FD7}/gu,"ῖ").replace(/\u{1FE2}/gu,"ὺ").replace(/\u{1FE3}/gu,"ύ").replace(/\u{1FE7}/gu,"ῦ").replace(/\u{1FC1}/gu,"῀").replace(/\u{1FED}/gu,"`").replace(/\u{1FEE}/gu,"´").replace(/[\u{00A8}\u{0308}]/gu,"");return"strippedDiaeresis"===n?[s]:[u]}static getPunctuation(){return".,;:!?'\"(){}\\[\\]<>/\\ ‐‑‒–—―‘’“”··\n\r"}static getInflectionConstraints(e){let t={fullFormBased:!1,suffixBased:!1,pronounClassRequired:!1};return e.hasOwnProperty(s.default.types.part)?e[s.default.types.part].value===u.POFS_PRONOUN?t.fullFormBased=!0:t.suffixBased=!0:console.warn("Unable to set grammar: part of speech data is missing or is incorrect",e[s.default.types.part]),t.pronounClassRequired=a.default.compareLanguages(l.languageID,e.languageID)&&e.hasOwnProperty(s.default.types.part)&&e[s.default.types.part].value===u.POFS_PRONOUN,t}static getPronounClasses(e,t,r=!0){let n=new Set,a=e.filter(e=>{let n=!1;return e.value&&(n=r?l.normalizeWord(e.value)===l.normalizeWord(t):e.value===t),n});for(const e of a)if(e.features.hasOwnProperty(s.default.types.grmClass))for(const t of e.features[s.default.types.grmClass].values)n.add(t);if(n.size>0)return new s.default(s.default.types.grmClass,Array.from(n),l.languageID)}}},"./grm-feature.js":
/*!************************!*\
  !*** ./grm-feature.js ***!
  \************************/
/*! exports provided: default */function(e,t,r){"use strict";r.r(t);var n=r(/*! ./language_model_factory.js */"./language_model_factory.js"),a=r(/*! ./feature.js */"./feature.js"),u=r(/*! ./i18n.js */"./i18n.js");class s{constructor(e,t,r,a=1){if(!s.types.isAllowed(t))throw new Error('Features of "'+t+'" type are not supported.');if(!e)throw new Error("Feature should have a non-empty value.");if(!t)throw new Error("Feature should have a non-empty type.");if(!r)throw new Error("Feature constructor requires a language");this.value=e,this.type=t,this.languageID=void 0,this.languageCode=void 0,({languageID:this.languageID,languageCode:this.languageCode}=n.default.getLanguageAttrs(r)),this.sortOrder=a}get language(){return console.warn('Please use a "languageID" instead of a "language"'),this.languageCode}isEqual(e){if(Array.isArray(e.value)){if(!Array.isArray(this.value)||this.value.length!==e.value.length)return!1;let t=this.type===e.type&&n.default.compareLanguages(this.languageID,e.languageID);return t=t&&this.value.every(function(t,r){return t===e.value[r]})}return n.default.compareLanguages(this.languageID,e.languageID)&&this.type===e.type&&this.value===e.value}isSubsetof(e){Array.isArray(e)||(e=[e]);let t=e[0].languageID,r=e[0].type,a=e.map(e=>e.value);return!(!n.default.compareLanguages(this.languageID,t)||this.type!==r||!a.includes(this.value))}hasValue(e){return Array.isArray(this.value)?this.value.includes(e):this.value===e}toString(){return Array.isArray(this.value)?this.value.join(","):this.value}toLocaleStringAbbr(e="en"){return Array.isArray(this.value)?this.value.map(t=>this.toLocaleStringAbbr(t,e)):u.i18n[e][this.value].abbr}static toFeature(e){if(Array.isArray(e)){if(!(e[0]instanceof a.default)){const t=e[0].type,r=e[0].languageID,n=e.map(e=>e.value);return new a.default(t,n,r)}}else if(!(e instanceof a.default))return new a.default(e.type,e.value,e.languageID);return e}}s.types={word:"word",part:"part of speech",number:"number",case:"case",grmCase:"case",declension:"declension",gender:"gender",type:"type",class:"class",grmClass:"class",conjugation:"conjugation",comparison:"comparison",tense:"tense",voice:"voice",mood:"mood",person:"person",frequency:"frequency",meaning:"meaning",source:"source",footnote:"footnote",dialect:"dialect",note:"note",pronunciation:"pronunciation",age:"age",area:"area",geo:"geo",kind:"kind",derivtype:"derivtype",stemtype:"stemtype",morph:"morph",var:"var",isAllowed(e){let t=`${e}`;return Object.values(this).includes(t)}},t.default=s},"./homonym.js":
/*!********************!*\
  !*** ./homonym.js ***!
  \********************/
/*! exports provided: default */function(e,t,r){"use strict";r.r(t);var n=r(/*! ./language_model_factory */"./language_model_factory.js"),a=r(/*! ./lexeme.js */"./lexeme.js");class u{constructor(e,t){if(!e)throw new Error("Lexemes data should not be empty.");if(!Array.isArray(e))throw new Error("Lexeme data should be provided in an array.");for(let t of e)if(!(t instanceof a.default))throw new Error("All lexeme data should be of Lexeme object type.");this.lexemes=e,this.targetWord=t}static readObject(e){let t=[];if(e.lexemes)for(let r of e.lexemes)t.push(a.default.readObject(r));let r=new u(t);return e.targetWord&&(r.targetWord=e.targetWord),r}get language(){return console.warn("Please use languageID instead"),n.default.getLanguageCodeFromId(this.languageID)}get languageID(){if(this.lexemes&&this.lexemes[0]&&this.lexemes[0].lemma&&this.lexemes[0].lemma.languageID)return this.lexemes[0].lemma.languageID;throw new Error("Homonym has not been initialized properly. Unable to obtain language ID information.")}get inflections(){let e=[];for(const t of this.lexemes)e=e.concat(t.inflections);return e}}t.default=u},"./i18n.js":
/*!*****************!*\
  !*** ./i18n.js ***!
  \*****************/
/*! exports provided: i18n */function(e,t,r){"use strict";r.r(t),r.d(t,"i18n",function(){return n});const n={en:{feminine:{full:"feminine",abbr:"f"},masculine:{full:"masculine",abbr:"m"},neuter:{full:"neuter",abbr:"n"}}}},"./inflection.js":
/*!***********************!*\
  !*** ./inflection.js ***!
  \***********************/
/*! exports provided: default */function(e,t,r){"use strict";r.r(t);var n=r(/*! ./feature.js */"./feature.js"),a=r(/*! ./language_model_factory.js */"./language_model_factory.js");class u{constructor(e,t,r=null,n=null,u=null){if(!e)throw new Error("Stem should not be empty.");if(!t)throw new Error("Language should not be empty.");if(!a.default.supportsLanguage(t))throw new Error(`language ${t} not supported.`);this.stem=e,this.languageID=void 0,this.languageCode=void 0,({languageID:this.languageID,languageCode:this.languageCode}=a.default.getLanguageAttrs(t)),this.model=a.default.getLanguageModel(this.languageID),this.constraints={fullFormBased:!1,suffixBased:!1,obligatoryMatches:[],optionalMatches:[]},this.suffix=r,this.prefix=n,this.example=u}get form(){let e=this.prefix?this.prefix:"";return e+=this.stem,e=this.suffix?e+this.suffix:e}get language(){return console.warn('Please use a "languageID" instead of a "language"'),this.languageCode}setConstraints(){if(this.model.hasOwnProperty("getInflectionConstraints")){let e=this.model.getInflectionConstraints(this);this.constraints=Object.assign(this.constraints,e)}}compareWithWord(e,t=!0){const r=a.default.getLanguageModel(this.languageID),n=this.constraints.suffixBased?this.suffix:this.form;return t?r.normalizeWord(n)===r.normalizeWord(e):n===e}static readObject(e){let t=new u(e.stem,e.languageCode,e.suffix,e.prefix,e.example);return t.languageID=a.default.getLanguageIdFromCode(t.languageCode),t}set feature(e){if(console.warn('Please use "addFeature" instead.'),!e)throw new Error("Inflection feature data cannot be empty.");Array.isArray(e)||(e=[e]);let t=e[0].type;this[t]=[];for(let r of e){if(!(r instanceof n.default))throw new Error("Inflection feature data must be a Feature object.");if(!a.default.compareLanguages(r.languageID,this.languageID))throw new Error(`Language "${r.languageID.toString()}" of a feature does not match \n          a language "${this.languageID.toString()}" of an Inflection object.`);this[t].push(r)}}addFeature(e){if(!e)throw new Error("feature data cannot be empty.");if(!(e instanceof n.default))throw new Error("feature data must be a Feature object.");if(!a.default.compareLanguages(e.languageID,this.languageID))throw new Error('Language "'+e.languageID.toString()+'" of a feature does not match a language "'+this.languageID.toString()+'" of a Lemma object.');this[e.type]=e}addFeatures(e){if(!Array.isArray(e))throw new Error("Features must be in an array");for(let t of e)this.addFeature(t)}hasFeatureValue(e,t){return!!this.hasOwnProperty(e)&&this[e].values.includes(t)}}t.default=u},"./inflection_group.js":
/*!*****************************!*\
  !*** ./inflection_group.js ***!
  \*****************************/
/*! exports provided: default */function(e,t,r){"use strict";r.r(t);t.default=class{constructor(e,t=[],r=null){this.groupingKey=e,this.inflections=t}append(e){this.inflections.push(e)}}},"./inflection_grouping_key.js":
/*!************************************!*\
  !*** ./inflection_grouping_key.js ***!
  \************************************/
/*! exports provided: default */function(e,t,r){"use strict";r.r(t);var n=r(/*! ./feature.js */"./feature.js");t.default=class{constructor(e,t,r={}){for(let r of t)this[r]=e[r];Object.assign(this,r)}hasFeatureValue(e,t){return!!this.hasOwnProperty(e)&&this[e].values.includes(t)}toString(){let e=[];for(let t of Object.getOwnPropertyNames(this).sort()){let r=this[t]instanceof n.default?this[t].values.sort().join(","):this[t];e.push(r)}return e.join(" ")}}},"./language_model.js":
/*!***************************!*\
  !*** ./language_model.js ***!
  \***************************/
/*! exports provided: default */function(e,t,r){"use strict";r.r(t);var n=r(/*! ./constants.js */"./constants.js"),a=r(/*! ./language_model_factory.js */"./language_model_factory.js"),u=r(/*! ./feature.js */"./feature.js"),s=r(/*! ./feature_type.js */"./feature_type.js"),o=r(/*! ./inflection_grouping_key.js */"./inflection_grouping_key.js"),i=r(/*! ./inflection_group.js */"./inflection_group.js");class l{constructor(){this.context_backward=l.contextBackward}static get contextForward(){return 0}static get contextBackward(){return 0}static get direction(){return n.LANG_DIR_LTR}static get baseUnit(){return n.LANG_UNIT_WORD}get contextForward(){return console.warn('Please use static "contextForward" instead'),this.constructor.contextForward}get contextBackward(){return console.warn('Please use static "contextBackward" instead'),this.constructor.contextBackward}get direction(){return console.warn('Please use static "direction" instead'),this.constructor.direction}get baseUnit(){return console.warn('Please use static "baseUnit" instead'),this.constructor.baseUnit}get features(){return console.warn('Please use individual "getFeatureType" or static "features" instead'),this.constructor.features}static get featureNames(){return this.featureValues.keys()}static typeFeature(e){if(this.typeFeatures.has(e))return this.typeFeatures.get(e);throw new Error(`Type feature "${e}" is not defined within "${this}"`)}static get typeFeatures(){console.warn("This getter must be defined in a descendant class")}static get features(){let e={};for(const t of this.featureNames)e[t]=this.getFeature(t);return e}static get languageID(){return n.LANG_UNDEFINED}static get languageCode(){return n.STR_LANG_CODE_UNDEFINED}static get languageCodes(){return[]}static get codes(){return console.warn('Use static "languageCodes" instead'),this.languageCodes}get codes(){return console.warn('Please use a static version of "codes" instead'),this.constructor.languageCodes}toCode(){return console.warn('Please use a static "languageCode" instead'),this.constructor.languageCode}static toCode(){return console.warn('Please use a static "languageCode" instead'),this.languageCode}static get featureValues(){return new Map([[u.default.types.part,[n.POFS_ADVERB,n.POFS_ADVERBIAL,n.POFS_ADJECTIVE,n.POFS_ARTICLE,n.POFS_CONJUNCTION,n.POFS_EXCLAMATION,n.POFS_INTERJECTION,n.POFS_NOUN,n.POFS_NUMERAL,n.POFS_PARTICLE,n.POFS_PREFIX,n.POFS_PREPOSITION,n.POFS_PRONOUN,n.POFS_SUFFIX,n.POFS_SUPINE,n.POFS_VERB,n.POFS_VERB_PARTICIPLE]],[u.default.types.gender,[n.GEND_MASCULINE,n.GEND_FEMININE,n.GEND_NEUTER]],[u.default.types.type,[n.TYPE_REGULAR,n.TYPE_IRREGULAR]],[u.default.types.person,[n.ORD_1ST,n.ORD_2ND,n.ORD_3RD]],[u.default.types.age,[]],[u.default.types.area,[]],[u.default.types.source,[]],[u.default.types.frequency,[]],[u.default.types.geo,[]],[u.default.types.pronunciation,[]],[u.default.types.kind,[]],[u.default.types.comparison,[]],[u.default.types.morph,[]],[u.default.types.stemtype,[]],[u.default.types.derivtype,[]]])}static get sourceLanguage(){return console.warn("Please use languageID directly"),this.languageID}get sourceLanguage(){return console.warn("Please use languageID directly"),this.constructor.languageID}static getFeatureType(e){console.warn("Please use getFeature instead");let t=this.featureValues;if(t.has(e))return new s.default(e,t.get(e),this.languageID);throw new Error(`Feature "${e}" is not defined`)}static getFeature(e){let t=this.featureValues;if(t.has(e)){let r=t.get(e);return new u.default(e,r,this.languageID,1,r)}throw new Error(`Feature "${e}" is not defined`)}_initializeFeatures(){let e={};for(const t of this.constructor.featureValues.keys())e[t]=this.constructor.getFeature(t);return e}grammarFeatures(){return console.warn('Please use a static version of "grammarFeatures" instead'),this.constructor.grammarFeatures()}static grammarFeatures(){return[]}static canInflect(e){return!1}static supportsLanguage(e){return this.languageCodes.includes[e]}static normalizeWord(e){return e}static alternateWordEncodings(e,t=null,r=null,n=null){return[]}alternateWordEncodings(e,t,r,n){return console.warn('Please use static "alternateWordEncodings" instead'),this.constructor.alternateWordEncodings(e,t,r,n)}static getPunctuation(){return".,;:!?'\"(){}\\[\\]<>/\\ ‐‑‒–—―‘’“”··\n\r"}getPunctuation(){return console.warn('Please use a static version of "getPunctuation"'),this.constructor.getPunctuation()}toString(){return String(this.constructor.languageCode)}isEqual(e){return a.default.compareLanguages(this.languageID,e.languageID)}static hasCode(e){if(this.isLanguageCode(e))return this.languageCodes.includes(e);throw new Error(`Format of a "${e}" is incorrect`)}static isLanguageID(e){return"symbol"==typeof e}static isLanguageCode(e){return!l.isLanguageID(e)}canInflect(e){return console.warn('Please use a static version of "canInflect" instead'),this.constructor.canInflect(e)}static groupInflectionsForDisplay(e){let t=new Map;for(let r of e){let e=new o.default(r,[u.default.types.part,u.default.types.declension,u.default.types.dialect,u.default.types.comparison],{prefix:r.prefix,suffix:r.suffix,stem:r.stem}),n=e.toString();t.has(n)?t.get(n).append(r):t.set(n,new i.default(e,[r]))}for(let e of t){let t=new Map;for(let r of e[1].inflections){let e,a=!1;r[u.default.types.grmCase]?(e=u.default.types.number,a=!0):e=r[u.default.types.tense]?u.default.types.tense:r[u.default.types.part]===n.POFS_VERB?u.default.types.part:r[u.default.types.part]===n.POFS_ADVERB?u.default.types.part:"misc";let s=new o.default(r,[e],{isCaseInflectionSet:a}),l=s.toString();t.has(l)?t.get(l).append(r):t.set(l,new i.default(s,[r]))}for(let e of t){let t=new Map,r=new Map;for(let n of e[1].inflections){let e=n[u.default.types.grmCase]?Math.max(n[u.default.types.grmCase].items.map(e=>e.sortOrder)):1,a=new o.default(n,[u.default.types.tense,u.default.types.voice]),s=a.toString();t.has(s)?t.get(s).append(n):(t.set(s,new i.default(a,[n],e)),r.set(s,e))}e[1].inflections=[];let n=Array.from(t.keys()).sort((e,t)=>{let n=r.get(e),a=r.get(t);return n>a?-1:a>n?1:0});for(let r of n)e[1].inflections.push(t.get(r))}for(let e of t){let t=e[1];for(let e of t.inflections){let t=new Map;for(let r of e.inflections){let e=new o.default(r,[u.default.types.grmCase,u.default.types.comparison,u.default.types.gender,u.default.types.number,u.default.types.person,u.default.types.tense,u.default.types.mood,u.default.types.voice]),n=e.toString();t.has(n)?t.get(n).append(r):t.set(n,new i.default(e,[r]))}e.inflections=Array.from(t.values())}}e[1].inflections=Array.from(t.values())}return Array.from(t.values())}groupInflectionsForDisplay(e){return console.warn('Please use a static version of "groupInflectionsForDisplay" instead'),this.constructor.groupInflectionsForDisplay(e)}}t.default=l},"./language_model_factory.js":
/*!***********************************!*\
  !*** ./language_model_factory.js ***!
  \***********************************/
/*! exports provided: default */function(e,t,r){"use strict";r.r(t);var n=r(/*! ./language_model.js */"./language_model.js"),a=r(/*! ./latin_language_model.js */"./latin_language_model.js"),u=r(/*! ./greek_language_model.js */"./greek_language_model.js"),s=r(/*! ./arabic_language_model.js */"./arabic_language_model.js"),o=r(/*! ./persian_language_model.js */"./persian_language_model.js"),i=r(/*! ./constants.js */"./constants.js");const l=new Map([[i.STR_LANG_CODE_LA,a.default],[i.STR_LANG_CODE_LAT,a.default],[i.STR_LANG_CODE_GRC,u.default],[i.STR_LANG_CODE_ARA,s.default],[i.STR_LANG_CODE_AR,s.default],[i.STR_LANG_CODE_PER,o.default]]);class d{static supportsLanguage(e){return e="symbol"==typeof e?d.getLanguageCodeFromId(e):e,l.has(e)}static getLanguageModel(e){let t=d.getLanguageCodeFromId(e);return l.has(t)?l.get(t):n.default}static getLanguageForCode(e=null){let t=l.get(e);return t?new t:new n.default}static getLanguageIdFromCode(e){for(const t of l.values())if(t.hasCode(e))return t.languageID;return i.LANG_UNDEFINED}static getLanguageCodeFromId(e){for(const t of l.values())if(t.languageID===e)return t.languageCode;return i.STR_LANG_CODE_UNDEFINED}static getLanguageAttrs(e){return"symbol"==typeof e?{languageID:e,languageCode:d.getLanguageCodeFromId(e)}:{languageID:d.getLanguageIdFromCode(e),languageCode:e}}static compareLanguages(e,t){return(e="symbol"==typeof e?d.getLanguageCodeFromId(e):e)===(t="symbol"==typeof t?d.getLanguageCodeFromId(t):t)}}t.default=d},"./latin_language_model.js":
/*!*********************************!*\
  !*** ./latin_language_model.js ***!
  \*********************************/
/*! exports provided: default */function(e,t,r){"use strict";r.r(t),r.d(t,"default",function(){return i});var n=r(/*! ./language_model.js */"./language_model.js"),a=r(/*! ./feature.js */"./feature.js"),u=r(/*! ./constants.js */"./constants.js");let s=new Map,o=!1;class i extends n.default{static get languageID(){return u.LANG_LATIN}static get languageCode(){return u.STR_LANG_CODE_LAT}static get languageCodes(){return[u.STR_LANG_CODE_LA,u.STR_LANG_CODE_LAT]}static get contextForward(){return 0}static get contextBackward(){return 0}static get direction(){return u.LANG_DIR_LTR}static get baseUnit(){return u.LANG_UNIT_WORD}static get featureValues(){return new Map([...n.default.featureValues,[a.default.types.grmClass,[u.CLASS_PERSONAL,u.CLASS_REFLEXIVE,u.CLASS_POSSESSIVE,u.CLASS_DEMONSTRATIVE,u.CLASS_RELATIVE,u.CLASS_INTERROGATIVE]],[a.default.types.number,[u.NUM_SINGULAR,u.NUM_PLURAL]],[a.default.types.grmCase,[u.CASE_NOMINATIVE,u.CASE_GENITIVE,u.CASE_DATIVE,u.CASE_ACCUSATIVE,u.CASE_ABLATIVE,u.CASE_LOCATIVE,u.CASE_VOCATIVE]],[a.default.types.declension,[u.ORD_1ST,u.ORD_2ND,u.ORD_3RD,u.ORD_4TH,u.ORD_5TH]],[a.default.types.tense,[u.TENSE_PRESENT,u.TENSE_IMPERFECT,u.TENSE_FUTURE,u.TENSE_PERFECT,u.TENSE_PLUPERFECT,u.TENSE_FUTURE_PERFECT]],[a.default.types.voice,[u.VOICE_ACTIVE,u.VOICE_PASSIVE]],[a.default.types.mood,[u.MOOD_INDICATIVE,u.MOOD_SUBJUNCTIVE,u.MOOD_IMPERATIVE,u.MOOD_PARTICIPLE,u.MOOD_SUPINE,u.MOOD_GERUNDIVE,u.MOOD_PARTICIPLE,u.MOOD_INFINITIVE]],[a.default.types.conjugation,[u.ORD_1ST,u.ORD_2ND,u.ORD_3RD,u.ORD_4TH]]])}static get typeFeatures(){return o||this.initTypeFeatures(),s}static initTypeFeatures(){for(const e of this.featureNames)s.set(e,this.getFeature(e));o=!0}static grammarFeatures(){return[a.default.types.part,a.default.types.grmCase,a.default.types.mood,a.default.types.declension,a.default.types.tense]}static canInflect(e){return!0}static normalizeWord(e){return e&&(e=(e=(e=(e=(e=(e=(e=(e=(e=(e=(e=(e=(e=(e=e.replace(/[\u00c0\u00c1\u00c2\u00c3\u00c4\u0100\u0102]/g,"A")).replace(/[\u00c8\u00c9\u00ca\u00cb\u0112\u0114]/g,"E")).replace(/[\u00cc\u00cd\u00ce\u00cf\u012a\u012c]/g,"I")).replace(/[\u00d2\u00d3\u00d4\u00df\u00d6\u014c\u014e]/g,"O")).replace(/[\u00d9\u00da\u00db\u00dc\u016a\u016c]/g,"U")).replace(/[\u00c6\u01e2]/g,"AE")).replace(/[\u0152]/g,"OE")).replace(/[\u00e0\u00e1\u00e2\u00e3\u00e4\u0101\u0103]/g,"a")).replace(/[\u00e8\u00e9\u00ea\u00eb\u0113\u0115]/g,"e")).replace(/[\u00ec\u00ed\u00ee\u00ef\u012b\u012d\u0129]/g,"i")).replace(/[\u00f2\u00f3\u00f4\u00f5\u00f6\u014d\u014f]/g,"o")).replace(/[\u00f9\u00fa\u00fb\u00fc\u016b\u016d]/g,"u")).replace(/[\u00e6\u01e3]/g,"ae")).replace(/[\u0153]/g,"oe")),e}static alternateWordEncodings(e,t=null,r=null,n=null){return[]}static getPunctuation(){return".,;:!?'\"(){}\\[\\]<>/\\ ‐‑‒–—―‘’“”··\n\r"}static getInflectionConstraints(e){let t={fullFormBased:!1,suffixBased:!1,pronounClassRequired:!1};return e.hasOwnProperty(a.default.types.part)?e[a.default.types.part].value===u.POFS_PRONOUN?t.fullFormBased=!0:t.suffixBased=!0:console.warn("Unable to set grammar: part of speech data is missing or is incorrect",e[a.default.types.part]),t}}},"./lemma.js":
/*!******************!*\
  !*** ./lemma.js ***!
  \******************/
/*! exports provided: default */function(e,t,r){"use strict";r.r(t);var n=r(/*! ./language_model_factory.js */"./language_model_factory.js"),a=r(/*! ./feature.js */"./feature.js");class u{constructor(e,t,r=[],a={}){if(!e)throw new Error("Word should not be empty.");if(!t)throw new Error("Language should not be empty.");this.languageID=void 0,this.languageCode=void 0,({languageID:this.languageID,languageCode:this.languageCode}=n.default.getLanguageAttrs(t)),this.word=e,this.principalParts=r,this.features={}}get language(){return console.warn('Please use "languageID" instead of "language"'),this.languageCode}static readObject(e){return new u(e.word,e.language,e.principalParts,e.pronunciation)}set feature(e){if(console.warn('Please use "addFeature" instead'),!e)throw new Error("feature data cannot be empty.");Array.isArray(e)||(e=[e]);let t=e[0].type;this.features[t]=[];for(let r of e){if(!(r instanceof a.default))throw new Error("feature data must be a Feature object.");if(!n.default.compareLanguages(r.languageID,this.languageID))throw new Error('Language "'+r.languageID.toString()+'" of a feature does not match a language "'+this.languageID.toString()+'" of a Lemma object.');this.features[t].push(r)}}addFeature(e){if(!e)throw new Error("feature data cannot be empty.");if(!(e instanceof a.default))throw new Error("feature data must be a Feature object.");if(!n.default.compareLanguages(e.languageID,this.languageID))throw new Error('Language "'+e.languageID.toString()+'" of a feature does not match a language "'+this.languageID.toString()+'" of a Lemma object.');this.features[e.type]=e}addFeatures(e){if(!Array.isArray(e))throw new Error("Features must be in an array");for(let t of e)this.addFeature(t)}get key(){return[this.word,n.default.getLanguageCodeFromId(this.languageID),...Object.values(this.features)].join("-")}}t.default=u},"./lexeme.js":
/*!*******************!*\
  !*** ./lexeme.js ***!
  \*******************/
/*! exports provided: default */function(e,t,r){"use strict";r.r(t);var n=r(/*! ./lemma.js */"./lemma.js"),a=r(/*! ./inflection.js */"./inflection.js"),u=r(/*! ./definition-set */"./definition-set.js"),s=r(/*! ./language_model_factory */"./language_model_factory.js");class o{constructor(e,t,r=null){if(!e)throw new Error("Lemma should not be empty.");if(!(e instanceof n.default))throw new Error("Lemma should be of Lemma object type.");if(!t)throw new Error("Inflections data should not be empty.");if(!Array.isArray(t))throw new Error("Inflection data should be provided in an array.");for(let e of t)if(!(e instanceof a.default))throw new Error("All inflection data should be of Inflection object type.");this.lemma=e,this.inflections=t,this.meaning=r||new u.default(this.lemma.word,this.lemma.languageID)}isPopulated(){return Object.entries(this.lemma.features).length>0||!this.meaning.isEmpty()||this.inflections.length>0}getGroupedInflections(){return s.default.getLanguageModel(this.lemma.languageID).groupInflectionsForDisplay(this.inflections)}static readObject(e){let t=n.default.readObject(e.lemma),r=[];for(let t of e.inflections)r.push(a.default.readObject(t));let s=new o(t,r);return s.meaning=u.default.readObject(e.meaning),s}static getSortByTwoLemmaFeatures(e,t){return(r,n)=>r.lemma.features[e]&&n.lemma.features[e]?r.lemma.features[e].sortOrder<n.lemma.features[e].sortOrder?1:r.lemma.features[e].sortOrder>n.lemma.features[e].sortOrder?-1:r.lemma.features[t]&&n.lemma.features[t]?r.lemma.features[t].sortOrder<n.lemma.features[t].sortOrder?1:r.lemma.features[t].sortOrder>n.lemma.features[t].sortOrder?-1:r.lemma.features[t]&&!n.lemma.features[t]?-1:!r.lemma.features[t]&&n.lemma.features[t]?1:0:void 0:r.lemma.features[e]&&!n.lemma.features[e]?-1:!r.lemma.features[e]&&n.lemma.features[e]?1:0}}t.default=o},"./persian_language_model.js":
/*!***********************************!*\
  !*** ./persian_language_model.js ***!
  \***********************************/
/*! exports provided: default */function(e,t,r){"use strict";r.r(t),r.d(t,"default",function(){return o});var n=r(/*! ./language_model.js */"./language_model.js"),a=r(/*! ./constants.js */"./constants.js");let u=new Map,s=!1;class o extends n.default{static get languageID(){return a.LANG_PERSIAN}static get languageCode(){return a.STR_LANG_CODE_PER}static get languageCodes(){return[a.STR_LANG_CODE_PER,a.STR_LANG_CODE_FAS,a.STR_LANG_CODE_FA,a.STR_LANG_CODE_FA_IR]}static get contextForward(){return 0}static get contextBackward(){return 0}static get direction(){return a.LANG_DIR_RTL}static get baseUnit(){return a.LANG_UNIT_WORD}static get typeFeatures(){return s||this.initTypeFeatures(),u}static initTypeFeatures(){for(const e of this.featureNames)u.set(e,this.getFeature(e));s=!0}static canInflect(e){return!1}static alternateWordEncodings(e,t=null,r=null,n=null){return[]}static getPunctuation(){return".,;:!?'\"(){}\\[\\]<>/\\ ‐‑‒–—―‘’“”··\n\r"}}},"./resource_provider.js":
/*!******************************!*\
  !*** ./resource_provider.js ***!
  \******************************/
/*! exports provided: default */function(e,t,r){"use strict";r.r(t);t.default=class{constructor(e="",t="",r=new Map([["default",t]])){this.uri=e,this.rights=r,this.rights.has("default")||this.rights.set("default",t)}toString(){return this.rights.get("default")}toLocaleString(e){return this.rights.get(e)||this.rights.get("default")}static getProxy(e=null,t={}){return new Proxy(t,{get:function(t,r){return"provider"===r?e:t[r]}})}}}})},e.exports=n()},function(e){e.exports={engine:{lat:["whitakerLat"],grc:["morpheusgrc"],ara:["aramorph"],per:["hazm"]},url:"https://morph.alpheios.net/api/v1/analysis/word?word=r_WORD&engine=r_ENGINE&lang=r_LANG",allowUnknownValues:!0}},function(e){e.exports={RDF:{Annotation:{about:"urn:TuftsMorphologyService:φιλόσοφος:morpheuslat",creator:{Agent:{about:"org.perseus:tools:morpheus.v1"}},created:{$:"2017-10-15T14:06:40.522369"},hasTarget:{Description:{about:"urn:word:φιλόσοφος"}},title:{},hasBody:{resource:"urn:uuid:idm140446394225264"},Body:{about:"urn:uuid:idm140446394225264",type:{resource:"cnt:ContentAsXML"},rest:{entry:{uri:"http://data.perseus.org/collections/urn:cite:perseus:grclexent.lex78378.1",dict:{hdwd:{lang:"grc",$:"φιλόσοφος"},pofs:{order:3,$:"noun"},decl:{$:"2nd"},gend:{$:"masculine"}},infl:{term:{lang:"grc",stem:{$:"φιλοσοφ"},suff:{$:"ος"}},pofs:{order:3,$:"noun"},decl:{$:"2nd"},case:{order:7,$:"nominative"},gend:{$:"masculine"},num:{$:"singular"},stemtype:{$:"os_ou"}}}}}}}}},function(e){e.exports={RDF:{Annotation:{about:"urn:TuftsMorphologyService:cepit:whitakerLat",creator:{Agent:{about:"net.alpheios:tools:wordsxml.v1"}},created:{$:"2017-08-10T23:16:53.672068"},hasTarget:{Description:{about:"urn:word:cepit"}},title:{},hasBody:{resource:"urn:uuid:idm140578133848416"},Body:{about:"urn:uuid:idm140578133848416",type:{resource:"cnt:ContentAsXML"},rest:{entry:{infl:{term:{lang:"lat",stem:{$:"cep"},suff:{$:"it"}},pofs:{order:3,$:"verb"},conj:{$:"3rd"},var:{$:"1st"},tense:{$:"perfect"},voice:{$:"active"},mood:{$:"indicative"},pers:{$:"3rd"},num:{$:"singular"}},dict:{hdwd:{lang:"lat",$:"capio, capere, cepi, captus"},pofs:{order:3,$:"verb"},conj:{$:"3rd"},kind:{$:"transitive"},freq:{order:6,$:"very frequent"},src:{$:"Ox.Lat.Dict."}},mean:{$:"take hold, seize; grasp; take bribe; arrest/capture; put on; occupy; captivate;"}}}}}}}},function(e){e.exports={RDF:{Annotation:{about:"urn:TuftsMorphologyService:mare:morpheuslat",creator:{Agent:{about:"org.perseus:tools:morpheus.v1"}},created:{$:"2017-09-08T06:59:48.639180"},rights:{$:"Morphology provided by Morpheus from the Perseus Digital Library at Tufts University."},hasTarget:{Description:{about:"urn:word:mare"}},title:{},hasBody:[{resource:"urn:uuid:idm140446402389888"},{resource:"urn:uuid:idm140446402332400"},{resource:"urn:uuid:idm140446402303648"}],Body:[{about:"urn:uuid:idm140446402389888",type:{resource:"cnt:ContentAsXML"},rest:{entry:{uri:"http://data.perseus.org/collections/urn:cite:perseus:latlexent.lex34070.1",dict:{hdwd:{lang:"lat",$:"mare"},pofs:{order:3,$:"noun"},decl:{$:"3rd"},gend:{$:"neuter"}},infl:[{term:{lang:"lat",stem:{$:"mar"},suff:{$:"e"}},pofs:{order:3,$:"noun"},decl:{$:"3rd"},case:{order:3,$:"ablative"},gend:{$:"neuter"},num:{$:"singular"},stemtype:{$:"is_is"}},{term:{lang:"lat",stem:{$:"mar"},suff:{$:"e"}},pofs:{order:3,$:"noun"},decl:{$:"3rd"},case:{order:7,$:"nominative"},gend:{$:"neuter"},num:{$:"singular"},stemtype:{$:"is_is"}},{term:{lang:"lat",stem:{$:"mar"},suff:{$:"e"}},pofs:{order:3,$:"noun"},decl:{$:"3rd"},case:{order:1,$:"vocative"},gend:{$:"neuter"},num:{$:"singular"},stemtype:{$:"is_is"}},{term:{lang:"lat",stem:{$:"mar"},suff:{$:"e"}},pofs:{order:3,$:"noun"},decl:{$:"3rd"},case:{order:4,$:"accusative"},gend:{$:"neuter"},num:{$:"singular"},stemtype:{$:"is_is"}}],mean:{$:"the sea"}}}},{about:"urn:uuid:idm140446402332400",type:{resource:"cnt:ContentAsXML"},rest:{entry:{uri:"http://data.perseus.org/collections/urn:cite:perseus:latlexent.lex34118.1",dict:{hdwd:{lang:"lat",$:"marum"},pofs:{order:3,$:"noun"},decl:{$:"2nd"},gend:{$:"neuter"}},infl:{term:{lang:"lat",stem:{$:"mar"},suff:{$:"e"}},pofs:{order:3,$:"noun"},decl:{$:"2nd"},case:{order:1,$:"vocative"},gend:{$:"neuter"},num:{$:"singular"},stemtype:{$:"us_i"}}}}},{about:"urn:uuid:idm140446402303648",type:{resource:"cnt:ContentAsXML"},rest:{entry:{uri:"http://data.perseus.org/collections/urn:cite:perseus:latlexent.lex34119.1",dict:{hdwd:{lang:"lat",$:"mas"},pofs:{order:2,$:"adjective"},decl:{$:"3rd"}},infl:[{term:{lang:"lat",stem:{$:"mare"}},pofs:{order:2,$:"adjective"},decl:{$:"3rd"},case:{order:3,$:"ablative"},gend:{$:"masculine"},num:{$:"singular"},stemtype:{$:"irreg_adj3"},morph:{$:"indeclform"}},{term:{lang:"lat",stem:{$:"mare"}},pofs:{order:2,$:"adjective"},decl:{$:"3rd"},case:{order:3,$:"ablative"},gend:{$:"feminine"},num:{$:"singular"},stemtype:{$:"irreg_adj3"},morph:{$:"indeclform"}},{term:{lang:"lat",stem:{$:"mare"}},pofs:{order:2,$:"adjective"},decl:{$:"3rd"},case:{order:3,$:"ablative"},gend:{$:"neuter"},num:{$:"singular"},stemtype:{$:"irreg_adj3"},morph:{$:"indeclform"}}]}}}]}}}},function(e){e.exports={RDF:{Annotation:{about:"urn:TuftsMorphologyService:cupidinibus:whitakerLat",creator:{Agent:{about:"net.alpheios:tools:wordsxml.v1"}},created:{$:"2017-08-10T23:15:29.185581"},hasTarget:{Description:{about:"urn:word:cupidinibus"}},title:{},hasBody:[{resource:"urn:uuid:idm140578094883136"},{resource:"urn:uuid:idm140578158026160"}],Body:[{about:"urn:uuid:idm140578094883136",type:{resource:"cnt:ContentAsXML"},rest:{entry:{infl:[{term:{lang:"lat",stem:{$:"cupidin"},suff:{$:"ibus"}},pofs:{order:5,$:"noun"},decl:{$:"3rd"},var:{$:"1st"},case:{order:2,$:"locative"},num:{$:"plural"},gend:{$:"masculine"}},{term:{lang:"lat",stem:{$:"cupidin"},suff:{$:"ibus"}},pofs:{order:5,$:"noun"},decl:{$:"3rd"},var:{$:"1st"},case:{order:5,$:"dative"},num:{$:"plural"},gend:{$:"masculine"}},{term:{lang:"lat",stem:{$:"cupidin"},suff:{$:"ibus"}},pofs:{order:5,$:"noun"},decl:{$:"3rd"},var:{$:"1st"},case:{order:3,$:"ablative"},num:{$:"plural"},gend:{$:"masculine"}}],dict:{hdwd:{lang:"lat",$:"Cupido, Cupidinis"},pofs:{order:5,$:"noun"},decl:{$:"3rd"},gend:{$:"masculine"},area:{$:"religion"},freq:{order:4,$:"common"},src:{$:"Ox.Lat.Dict."}},mean:{$:"Cupid, son of Venus; personification of carnal desire;"}}}},{about:"urn:uuid:idm140578158026160",type:{resource:"cnt:ContentAsXML"},rest:{entry:{infl:[{term:{lang:"lat",stem:{$:"cupidin"},suff:{$:"ibus"}},pofs:{order:5,$:"noun"},decl:{$:"3rd"},var:{$:"1st"},case:{order:2,$:"locative"},num:{$:"plural"},gend:{$:"common"}},{term:{lang:"lat",stem:{$:"cupidin"},suff:{$:"ibus"}},pofs:{order:5,$:"noun"},decl:{$:"3rd"},var:{$:"1st"},case:{order:5,$:"dative"},num:{$:"plural"},gend:{$:"common"}},{term:{lang:"lat",stem:{$:"cupidin"},suff:{$:"ibus"}},pofs:{order:5,$:"noun"},decl:{$:"3rd"},var:{$:"1st"},case:{order:3,$:"ablative"},num:{$:"plural"},gend:{$:"common"}}],dict:{hdwd:{lang:"lat",$:"cupido, cupidinis"},pofs:{order:5,$:"noun"},decl:{$:"3rd"},gend:{$:"common"},freq:{order:5,$:"frequent"},src:{$:"Ox.Lat.Dict."}},mean:{$:"desire/love/wish/longing (passionate); lust; greed, appetite; desire for gain;"}}}}]}}}},function(e,t,r){"use strict";r.r(t);var n=class{prepareRequestUrl(e,t){return null}async getHomonym(e,t){}fetch(e,t){let r=this.prepareRequestUrl(e,t);return new Promise((t,n)=>{r?window.fetch(r).then(function(e){try{if(e.ok){let r=e.json();t(r)}else n(e.statusText)}catch(e){n(e)}}).catch(e=>{n(e)}):n(new Error(`Unable to prepare parser request url for ${e}`))})}fetchTestData(e,t){return new Promise((e,t)=>{try{e({})}catch(e){t(e)}})}transform(e,t){return{}}},a=r(0);var u=class{constructor(e,t){this.model=e,this.engine=t;for(let e of Object.keys(this.model.features))this.addFeature(e);this.parseLemma=function(e){return new a.Lemma(e,this.model.languageID)},this.parseProperty=function(e,t){let r=[];return r="decl"===e?t.split("&").map(e=>e.trim()):"comp"===e&&"positive"===t?[]:[t]},this.reportLexeme=function(e){return e.lemma.features[a.Feature.types.part]}}addFeature(e){this[e]={};let t=this.model;return this[e].add=function(e,t){return this[e]=t,this},this[e].get=function(r,n=1,a=!1){let u=[];if(this.importer.has(r)){let a=this.importer.get(r);u=Array.isArray(a)?t.typeFeature(e).createFeatures(a,n):t.typeFeature(e).createFeature(a,n)}else if(t.typeFeature(e).hasValue(r)||t.typeFeature(e).valuesUnrestricted)u=t.typeFeature(e).createFeature(r,n);else{let s=`Unknown value "${r}" of feature "${e}" for ${t.languageCode} (allowed = ${a})`;if(!a)throw new Error(s);console.log(s),u=t.typeFeature(e).createFeature(r,n)}return u},this[e].getMultiple=function(r,n=!1){let a=[];for(const u of r)if(this.importer.has(u.providerValue)){let e=this.importer.get(u.providerValue);a=Array.isArray(e)?e:[e,u.sortOrder]}else if(t.typeFeature(e).hasValue(u.providerValue)||t.typeFeature(e).valuesUnrestricted)a.push([u.providerValue,u.sortOrder]);else{let r=`Unknown value "${u.providerValue}" of feature "${e}" for ${t.languageCode} (allowed = ${n})`;if(!n)throw new Error(r);console.log(r),a.push([u.providerValue,u.sortOrder])}return t.typeFeature(e).createFeatures(a)},this[e].importer=new a.FeatureImporter,this[e]}setLemmaParser(e){this.parseLemma=e}setPropertyParser(e){this.parseProperty=e}setLexemeFilter(e){this.reportLexeme=e}mapFeature(e,t,r,n,u){let s=[],o=t[r];if(o)if(Array.isArray(o))for(let e of o)s.push(...this.parseProperty(r,e.$));else s=this.parseProperty(r,o.$);if(s.length>0){s=s.map(e=>({providerValue:e,sortOrder:o.order?o.order:1}));let t=this[a.Feature.types[n]].getMultiple(s,u);e.addFeature(t)}}};let s=new u(a.LatinLanguageModel,"whitakerLat");s.addFeature(a.Feature.types.gender).importer.map("common",[[a.Constants.GEND_MASCULINE,1],[a.Constants.GEND_FEMININE,2]]).map("all",[[a.Constants.GEND_MASCULINE,1],[a.Constants.GEND_FEMININE,2],[a.Constants.GEND_NEUTER,3]]),s.addFeature(a.Feature.types.tense).importer.map("future_perfect",a.Constants.TENSE_FUTURE_PERFECT),s.setLemmaParser(function(e){let t,r,n=[],u=e.split(", ");for(let[e,t]of u.entries()){let a=t.split(" ")[0];0===e&&(r=a),n.push(a)}return r&&(t=new a.Lemma(r,this.model.languageCode,n)),t});var o=s;let i=new u(a.GreekLanguageModel,"morpheusgrc");i.addFeature(a.Feature.types.gender).importer.map("masculine feminine",[[a.Constants.GEND_MASCULINE,1],[a.Constants.GEND_FEMININE,2]]),i.addFeature(a.Feature.types.declension).importer.map("1st & 2nd",[[a.Constants.ORD_1ST,1],[a.Constants.ORD_2ND,2]]);var l=i;let d=new u(a.ArabicLanguageModel,"aramorph");d.addFeature(a.Feature.types.part).importer.map("proper noun",a.Constants.POFS_NOUN);var c=d;let f=new u(a.PersianLanguageModel,"hazm");f.addFeature(a.Feature.types.part).importer.map("proper noun",a.Constants.POFS_NOUN),f.setLexemeFilter(function(e){return Boolean(e.lemma.word)});var g=f,p=r(5),m=r(4),h=r(3),E=r(2);var _=class{constructor(){this._words={cupidinibus:p,mare:m,cepit:h,"φιλόσοφος":E}}get(e){if(this._words.hasOwnProperty(e))return this._words[e];throw new Error(`Word "${e}" does not exist in test data`)}},I=r(1);var A=class extends n{constructor(e={}){super();try{this.config=JSON.parse(I)}catch(e){this.config=Object.assign({},I)}Object.assign(this.config,e),this.engineMap=new Map([o,l,c,g].map(e=>[e.engine,e]))}getEngineLanguageMap(e){return this.config.engine[e]?this.engineMap.get(this.config.engine[e][0]):null}prepareRequestUrl(e,t){let r=this.getEngineLanguageMap(e);if(r){let n=r.engine;return this.config.url.replace("r_WORD",t).replace("r_ENGINE",n).replace("r_LANG",e)}return null}fetchTestData(e,t){return new Promise((e,r)=>{try{let n=(new _).get(t);e(JSON.parse(n))}catch(e){r(e)}})}transform(e,t){let r=[],n=e.RDF.Annotation.Body;Array.isArray(n)||(n=n?[n]:[]);let u=e.RDF.Annotation.creator.Agent.about,s="";e.RDF.Annotation.rights&&(s=e.RDF.Annotation.rights.$);let o=new a.ResourceProvider(u,s);for(let e of n){let n,u=e.rest.entry.infl;u?Array.isArray(u)||(u=[u]):u=[];let s=[["pofs","part"],["case","grmCase"],["gend","gender"],["decl","declension"],["conj","conjugation"],["area","area"],["age","age"],["geo","geo"],["freq","frequency"],["note","note"],["pron","pronunciation"],["src","source"],["kind","kind"]];e.rest.entry.dict?Array.isArray(e.rest.entry.dict)?n=e.rest.entry.dict:(!e.rest.entry.dict.hdwd&&u[0].term&&(e.rest.entry.dict.hdwd={},e.rest.entry.dict.hdwd.lang=u[0].term.lang,e.rest.entry.dict.hdwd.$=u[0].term.stem.$+u[0].term.suff.$),n=[e.rest.entry.dict]):u.length>0&&u[0].term&&(n=[u[0].term]);let i=n[0].hdwd?n[0].hdwd.lang:n[0].lang,l=this.getEngineLanguageMap(i),d=[],c=[];for(let t of n.entries()){let r,u=[],f=t[0],g=t[1];if(g.hdwd&&(r=g.hdwd.$),!r||!i)continue;let p=l.parseLemma(r,i);d.push(p);for(let e of s)l.mapFeature(p,g,...e,this.config.allowUnknownValues);let m=e.rest.entry.mean;if(Array.isArray(m)||(m=[m]),m=m.filter(e=>e),n.length>1){if(m&&m[f]){let e=m[f],t=e.lang?e.lang:"eng";u.push(a.ResourceProvider.getProxy(o,new a.Definition(e.$,t,"text/plain",d[f].word)))}}else{let e=m.map(e=>{let t=e.lang?e.lang:"eng";return a.ResourceProvider.getProxy(o,new a.Definition(e.$,t,"text/plain",p.word))});u.push(...e)}let h=new a.Lexeme(p,[]);h.meaning.appendShortDefs(u),c.push(a.ResourceProvider.getProxy(o,h))}if(0===d.length)continue;let f=[];for(let e of u){let r=new a.Inflection(e.term.stem.$,l.model.languageID);t&&r.addFeature(new a.Feature(a.Feature.types.fullForm,t,l.model.languageID)),e.term.suff&&(r.suffix=e.term.suff.$),e.xmpl&&(r.example=e.xmpl.$),l.mapFeature(r,e,"pofs","part",this.config.allowUnknownValues),l.mapFeature(r,e,"case","grmCase",this.config.allowUnknownValues),l.mapFeature(r,e,"decl","declension",this.config.allowUnknownValues),l.mapFeature(r,e,"num","number",this.config.allowUnknownValues),l.mapFeature(r,e,"gend","gender",this.config.allowUnknownValues),l.mapFeature(r,e,"conj","conjugation",this.config.allowUnknownValues),l.mapFeature(r,e,"tense","tense",this.config.allowUnknownValues),l.mapFeature(r,e,"voice","voice",this.config.allowUnknownValues),l.mapFeature(r,e,"mood","mood",this.config.allowUnknownValues),l.mapFeature(r,e,"pers","person",this.config.allowUnknownValues),l.mapFeature(r,e,"comp","comparison",this.config.allowUnknownValues),e.stemtype&&l.mapFeature(r,e,"stemtype","stemtype",this.config.allowUnknownValues),e.derivtype&&l.mapFeature(r,e,"derivtype","derivtype",this.config.allowUnknownValues),e.dial&&l.mapFeature(r,e,"dial","dialect",this.config.allowUnknownValues),e.morph&&l.mapFeature(r,e,"morph","morph",this.config.allowUnknownValues),(r[a.Feature.types.grmCase]||r[a.Feature.types.tense]||r[a.Feature.types.mood]||r[a.Feature.types.voice]||r[a.Feature.types.person]||r[a.Feature.types.comparison]||r[a.Feature.types.stemtype]||r[a.Feature.types.derivtype]||r[a.Feature.types.dialect]||r[a.Feature.types.morph]||r[a.Feature.types.example])&&f.push(r);for(let t of d)t.features[a.Feature.types.part]||l.mapFeature(t,e,"pofs","part",this.config.allowUnknownValues),t.features[a.Feature.types.declension]||t.features[a.Feature.types.part]&&!t.features[a.Feature.types.part].isEqual(r[a.Feature.types.part])||l.mapFeature(t,e,"decl","declension",this.config.allowUnknownValues),t.features[a.Feature.types.conjugation]||t.features[a.Feature.types.part]&&!t.features[a.Feature.types.part].isEqual(r[a.Feature.types.part])||l.mapFeature(t,e,"conj","conjugation",this.config.allowUnknownValues)}for(let e of c)l.reportLexeme(e)&&(e.inflections=f,r.push(e))}return r.length>0?new a.Homonym(r,t):void 0}async getHomonym(e,t){let r=await this.fetch(e,t);if(r)return this.transform(r,t)}};r.d(t,"BaseAdapter",function(){return n}),r.d(t,"AlpheiosTuftsAdapter",function(){return A})}])});