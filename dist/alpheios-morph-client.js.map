{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap","webpack:///./base_adapter.js","webpack:///./driver.js","webpack:///./tufts/adapter.js","webpack:///./tufts/engine/aramorph.js","webpack:///./tufts/engine/data/test-data.js","webpack:///./tufts/engine/hazm.js","webpack:///./tufts/engine/morpheusgrc.js","webpack:///./tufts/engine/whitakers.js","webpack:///./tufts/lib.js","webpack:///external \"alpheios-data-models\""],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,O;ACVA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kDAA0C,gCAAgC;AAC1E;AACA;;AAEA;AACA;AACA;AACA,gEAAwD,kBAAkB;AAC1E;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAyC,iCAAiC;AAC1E,wHAAgH,mBAAmB,EAAE;AACrI;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;;;;;;;AClFA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,qEAAqE,KAAK;AAC1E;AACA,KAAK;AACL;;AAEA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;;;;;;AC3FA;AACA;AACQ;;;;;;;;;;;;;;;;;;;;;;;;ACFR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB;AACA,0BAA0B;AAC1B;AACA;AACA;AACA,KAAK;AACL,oCAAoC;AACpC;AACA;AACA,sRAAsF,yBAAyB;AAC/G;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,eAAe,eAAe;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9QA;AACA;;AAEA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACLA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,6BAA6B,KAAK;AAClC;AACA;AACA;;;;;;;;;;;;;;;;;ACtBA;AACA;;AAEA;;AAEA;AACA,wCAAwC,oCAAoC;;AAE5E;;;;;;;;;;;;;;;;;ACRA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;;;;;;;;;;;;;;;;ACnBA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,CAAC;;AAED;;;;;;;;;;;;;;AC3CA;AAAA;AAAA;AACA;AACA;AAC0C;;AAE1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,wBAAwB;AACvC,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,OAAO;AACtB,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,0CAA0C,cAAc,gBAAgB,YAAY,QAAQ,mBAAmB,cAAc,mBAAmB;AAChJ;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA,eAAe,SAAS;AACxB;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT,0CAA0C,mBAAmB,gBAAgB,YAAY,QAAQ,mBAAmB,cAAc,mBAAmB;AACrJ;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,SAAS,qEAAqE,EAAE;AAChH;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AChLA,kE","file":"alpheios-morph-client.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"alpheios-data-models\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"alpheios-data-models\"], factory);\n\telse {\n\t\tvar a = typeof exports === 'object' ? factory(require(\"alpheios-data-models\")) : factory(root[\"alpheios-data-models\"]);\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(window, function(__WEBPACK_EXTERNAL_MODULE_alpheios_data_models__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./driver.js\");\n","/**\r\n * Base Adapter Class for a Morphology Service Client\r\n */\r\nclass BaseAdapter {\r\n  /**\r\n   * Method which is used to prepare a lookup request according\r\n   * to the adapter specific logic\r\n   * @param {string} lang - the language code\r\n   * @param {string} word - the word to lookup\r\n   * @returns {string} the url for the request\r\n   */\r\n  prepareRequestUrl (lang, word) {\r\n    /** must be overridden in the adapter implementation class **/\r\n    return null\r\n  }\r\n\r\n  /**\r\n   * Lookup the supplied word using the preconfigured engines and\r\n   * and return a Homonym\r\n   * @param {string} lang - ISO 639-2 language code for the word\r\n   * @param {string} word - the word to lookup\r\n   * @return {Homonym} homonym object\r\n   */\r\n  async getHomonym (lang, word) {\r\n    // implement in the derived adapater class\r\n    return undefined\r\n  }\r\n\r\n  /**\r\n   * Fetch response from a remote URL\r\n   * @param {string} lang - the language code\r\n   * @param {string} word - the word to lookup\r\n   * @returns {Promise} a promse which if successful resolves to json response object\r\n   *                    with the results of the analysis\r\n   */\r\n  fetch (lang, word) {\r\n    let url = this.prepareRequestUrl(lang, word)\r\n    return new Promise((resolve, reject) => {\r\n      if (url) {\r\n        window.fetch(url).then(\r\n          function (response) {\r\n            try {\r\n              if (response.ok) {\r\n                let json = response.json()\r\n                resolve(json)\r\n              } else {\r\n                reject(response.statusText)\r\n              }\r\n            } catch (error) {\r\n              reject(error)\r\n            }\r\n          }\r\n        ).catch((error) => {\r\n          reject(error)\r\n        }\r\n        )\r\n      } else {\r\n        reject(new Error(`Unable to prepare parser request url for ${lang}`))\r\n      }\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Fetch test data to test the adapter\r\n   * @param {string} lang - the language code\r\n   * @param {string} word - the word to lookup\r\n   * @returns {Promise} a promse which if successful resolves to json response object\r\n   *                    with the test data\r\n   */\r\n  fetchTestData (lang, word) {\r\n    return new Promise((resolve, reject) => {\r\n      try {\r\n        let data = {}\r\n        resolve(data)\r\n      } catch (error) {\r\n        reject(error)\r\n      }\r\n    })\r\n  }\r\n\r\n  /**\r\n   * A function that maps a morphological service's specific data types and values into an inflection library standard.\r\n   * @param {object} jsonObj - A JSON data from the fetch request\r\n   * @param {object} targetWord - the original target word of the analysis\r\n   * @returns {Homonym} A library standard Homonym object.\r\n   */\r\n  transform (jsonObj, targetWord) {\r\n    return {}\r\n  }\r\n}\r\n\r\nexport default BaseAdapter\r\n","import AlpheiosTuftsAdapter from './tufts/adapter'\r\nimport BaseAdapter from './base_adapter'\r\nexport { BaseAdapter, AlpheiosTuftsAdapter }\r\n","import BaseAdapter from '../base_adapter'\r\nimport Whitakers from './engine/whitakers'\r\nimport Morpheusgrc from './engine/morpheusgrc'\r\nimport Aramorph from './engine/aramorph'\r\nimport Hazm from './engine/hazm'\r\nimport * as Models from 'alpheios-data-models'\r\nimport WordTestData from './engine/data/test-data'\r\nimport DefaultConfig from './config.json'\r\n\r\nclass AlpheiosTuftsAdapter extends BaseAdapter {\r\n  /**\r\n   * A Morph Client Adapter for the Tufts Morphology Service\r\n   * @constructor\r\n   * @param {object} config configuraiton object\r\n   */\r\n  constructor (config = {}) {\r\n    super()\r\n    try {\r\n      this.config = JSON.parse(DefaultConfig)\r\n    } catch (e) {\r\n      this.config = Object.assign({}, DefaultConfig)\r\n    }\r\n    Object.assign(this.config, config)\r\n    this.engineMap = new Map(([ Whitakers, Morpheusgrc, Aramorph, Hazm ]).map((e) => { return [ e.engine, e ] }))\r\n  }\r\n\r\n  getEngineLanguageMap (lang) {\r\n    if (this.config.engine[lang]) {\r\n      return this.engineMap.get(this.config.engine[lang][0])\r\n    } else {\r\n      return null\r\n    }\r\n  }\r\n\r\n  prepareRequestUrl (lang, word) {\r\n    let engine = this.getEngineLanguageMap(lang)\r\n    if (engine) {\r\n      let code = engine.engine\r\n      return this.config.url.replace('r_WORD', word).replace('r_ENGINE', code).replace('r_LANG', lang)\r\n    } else {\r\n      return null\r\n    }\r\n  }\r\n\r\n  fetchTestData (lang, word) {\r\n    return new Promise((resolve, reject) => {\r\n      try {\r\n        let wordData = new WordTestData().get(word)\r\n        let json = JSON.parse(wordData)\r\n        resolve(json)\r\n      } catch (error) {\r\n        // Word is not found in test data\r\n        reject(error)\r\n      }\r\n    })\r\n  }\r\n\r\n  /**\r\n   * A function that maps a morphological service's specific data types and values into an inflection library standard.\r\n   * @param {object} jsonObj - A JSON data from a Morphological Analyzer.\r\n   * @param {object} targetWord - the target of the analysis\r\n   * @returns {Models.Homonym} A library standard Homonym object.\r\n   */\r\n  transform (jsonObj, targetWord) {\r\n    'use strict'\r\n    let lexemes = []\r\n    let annotationBody = jsonObj.RDF.Annotation.Body\r\n    if (!Array.isArray(annotationBody)) {\r\n      /*\r\n      If only one lexeme is returned, Annotation Body will not be an array but rather a single object.\r\n      Let's convert it to an array so we can work with it in the same way no matter what format it is.\r\n      */\r\n      if (annotationBody) {\r\n        annotationBody = [annotationBody]\r\n      } else {\r\n        annotationBody = []\r\n      }\r\n    }\r\n    let providerUri = jsonObj.RDF.Annotation.creator.Agent.about\r\n    let providerRights = ''\r\n    if (jsonObj.RDF.Annotation.rights) {\r\n      providerRights = jsonObj.RDF.Annotation.rights.$\r\n    }\r\n    let provider = new Models.ResourceProvider(providerUri, providerRights)\r\n    for (let lexeme of annotationBody) {\r\n      let inflectionsJSON = lexeme.rest.entry.infl\r\n      if (!inflectionsJSON) {\r\n        inflectionsJSON = []\r\n      } else if (!Array.isArray(inflectionsJSON)) {\r\n        // If only one inflection returned, it is a single object, not an array of objects.\r\n        // Convert it to an array for uniformity.\r\n        inflectionsJSON = [inflectionsJSON]\r\n      }\r\n      let lemmaElements\r\n      let features = [\r\n        ['pofs', 'part'],\r\n        ['case', 'grmCase'],\r\n        ['gend', 'gender'],\r\n        ['decl', 'declension'],\r\n        ['conj', 'conjugation'],\r\n        ['area', 'area'],\r\n        ['age', 'age'],\r\n        ['geo', 'geo'],\r\n        ['freq', 'frequency'],\r\n        ['note', 'note'],\r\n        ['pron', 'pronunciation'],\r\n        ['kind', 'kind']\r\n      ]\r\n      if (lexeme.rest.entry.dict) {\r\n        if (Array.isArray(lexeme.rest.entry.dict)) {\r\n          lemmaElements = lexeme.rest.entry.dict\r\n        } else {\r\n          if (!lexeme.rest.entry.dict.hdwd && inflectionsJSON[0].term) {\r\n            lexeme.rest.entry.dict.hdwd = {}\r\n            lexeme.rest.entry.dict.hdwd.lang = inflectionsJSON[0].term.lang\r\n            lexeme.rest.entry.dict.hdwd.$ = inflectionsJSON[0].term.stem.$ + inflectionsJSON[0].term.suff.$\r\n          }\r\n          lemmaElements = [lexeme.rest.entry.dict]\r\n        }\r\n      } else if (inflectionsJSON.length > 0 && inflectionsJSON[0].term) {\r\n        lemmaElements = [ inflectionsJSON[0].term ]\r\n      }\r\n      // in rare cases (e.g. conditum in Whitakers) multiple dict entries\r\n      // exist - always use the lemma and language from the first\r\n      let language = lemmaElements[0].hdwd ? lemmaElements[0].hdwd.lang : lemmaElements[0].lang\r\n      // Get importer based on the language\r\n      let mappingData = this.getEngineLanguageMap(language)\r\n      let lemmas = []\r\n      let lexemeSet = []\r\n      for (let entry of lemmaElements.entries()) {\r\n        let shortdefs = []\r\n        let index = entry[0]\r\n        let elem = entry[1]\r\n        let lemmaText\r\n        if (elem.hdwd) {\r\n          lemmaText = elem.hdwd.$\r\n        }\r\n        if (!lemmaText || !language) {\r\n          continue\r\n        }\r\n        let lemma = mappingData.parseLemma(lemmaText, language)\r\n        lemmas.push(lemma)\r\n        for (let feature of features) {\r\n          mappingData.mapFeature(lemma, elem, ...feature, this.config.allowUnknownValues)\r\n        }\r\n        let meanings = lexeme.rest.entry.mean\r\n        if (!Array.isArray(meanings)) {\r\n          meanings = [meanings]\r\n        }\r\n        meanings = meanings.filter((m) => m)\r\n        // if we have multiple dictionary elements, take the meaning with the matching index\r\n        if (lemmaElements.length > 1) {\r\n          if (meanings && meanings[index]) {\r\n            let meaning = meanings[index]\r\n            // TODO: convert a source-specific language code to ISO 639-3 if don't match\r\n            let lang = meaning.lang ? meaning.lang : 'eng'\r\n            shortdefs.push(Models.ResourceProvider.getProxy(provider,\r\n              new Models.Definition(meaning.$, lang, 'text/plain', lemmas[index].word)))\r\n          }\r\n        } else {\r\n          // Changed to prevent some weird \"Array Iterator.prototype.next called on incompatible receiver [object Unknown]\" error\r\n          let sDefs = meanings.map(meaning => {\r\n            let lang = meaning.lang ? meaning.lang : 'eng'\r\n            return Models.ResourceProvider.getProxy(provider,\r\n              new Models.Definition(meaning.$, lang, 'text/plain', lemma.word))\r\n          })\r\n          shortdefs.push(...sDefs)\r\n        }\r\n        let lexmodel = new Models.Lexeme(lemma, [])\r\n\r\n        lexmodel.meaning.appendShortDefs(shortdefs)\r\n        lexemeSet.push(Models.ResourceProvider.getProxy(provider, lexmodel))\r\n      }\r\n      if (lemmas.length === 0) {\r\n        continue\r\n      }\r\n      let inflections = []\r\n      for (let inflectionJSON of inflectionsJSON) {\r\n        let stem = inflectionJSON.term.stem ? inflectionJSON.term.stem.$ : null\r\n        let suffix = inflectionJSON.term.suff ? inflectionJSON.term.suff.$ : null\r\n        let prefix = inflectionJSON.term.pref ? inflectionJSON.term.pref.$ : null\r\n        let xmpl = inflectionJSON.xmlle ? inflectionJSON.xmpl.$ : null\r\n        let inflection = new Models.Inflection(stem, mappingData.model.languageID, suffix, prefix, xmpl)\r\n        if (targetWord) {\r\n          inflection.addFeature(new Models.Feature(Models.Feature.types.fullForm, targetWord, mappingData.model.languageID))\r\n        }\r\n        // Parse whatever grammatical features we're interested in\r\n        mappingData.mapFeature(inflection, inflectionJSON, 'pofs', 'part', this.config.allowUnknownValues)\r\n        mappingData.mapFeature(inflection, inflectionJSON, 'case', 'grmCase', this.config.allowUnknownValues)\r\n        mappingData.mapFeature(inflection, inflectionJSON, 'decl', 'declension', this.config.allowUnknownValues)\r\n        mappingData.mapFeature(inflection, inflectionJSON, 'num', 'number', this.config.allowUnknownValues)\r\n        mappingData.mapFeature(inflection, inflectionJSON, 'gend', 'gender', this.config.allowUnknownValues)\r\n        mappingData.mapFeature(inflection, inflectionJSON, 'conj', 'conjugation', this.config.allowUnknownValues)\r\n        mappingData.mapFeature(inflection, inflectionJSON, 'tense', 'tense', this.config.allowUnknownValues)\r\n        mappingData.mapFeature(inflection, inflectionJSON, 'voice', 'voice', this.config.allowUnknownValues)\r\n        mappingData.mapFeature(inflection, inflectionJSON, 'mood', 'mood', this.config.allowUnknownValues)\r\n        mappingData.mapFeature(inflection, inflectionJSON, 'pers', 'person', this.config.allowUnknownValues)\r\n        mappingData.mapFeature(inflection, inflectionJSON, 'comp', 'comparison', this.config.allowUnknownValues)\r\n        if (inflectionJSON.stemtype) {\r\n          mappingData.mapFeature(inflection, inflectionJSON, 'stemtype', 'stemtype', this.config.allowUnknownValues)\r\n        }\r\n        if (inflectionJSON.derivtype) {\r\n          mappingData.mapFeature(inflection, inflectionJSON, 'derivtype', 'derivtype', this.config.allowUnknownValues)\r\n        }\r\n        if (inflectionJSON.dial) {\r\n          mappingData.mapFeature(inflection, inflectionJSON, 'dial', 'dialect', this.config.allowUnknownValues)\r\n        }\r\n        if (inflectionJSON.morph) {\r\n          mappingData.mapFeature(inflection, inflectionJSON, 'morph', 'morph', this.config.allowUnknownValues)\r\n        }\r\n        // we only use the inflection if it tells us something the dictionary details do not\r\n        if (inflection[Models.Feature.types.grmCase] ||\r\n          inflection[Models.Feature.types.tense] ||\r\n          inflection[Models.Feature.types.mood] ||\r\n          inflection[Models.Feature.types.voice] ||\r\n          inflection[Models.Feature.types.person] ||\r\n          inflection[Models.Feature.types.comparison] ||\r\n          inflection[Models.Feature.types.stemtype] ||\r\n          inflection[Models.Feature.types.derivtype] ||\r\n          inflection[Models.Feature.types.dialect] ||\r\n          inflection[Models.Feature.types.morph] ||\r\n          inflection[Models.Feature.types.example]) {\r\n          inflections.push(inflection)\r\n        }\r\n        // inflection can provide lemma decl, pofs, conj\r\n        for (let lemma of lemmas) {\r\n          if (!lemma.features[Models.Feature.types.part]) {\r\n            mappingData.mapFeature(lemma, inflectionJSON, 'pofs', 'part', this.config.allowUnknownValues)\r\n          }\r\n          // only take declension from inflection if lemma has no part of speech or its the same as the inflection\r\n          if (!lemma.features[Models.Feature.types.declension] &&\r\n            (!lemma.features[Models.Feature.types.part] || lemma.features[Models.Feature.types.part].isEqual(inflection[Models.Feature.types.part]))) {\r\n            mappingData.mapFeature(lemma, inflectionJSON, 'decl', 'declension', this.config.allowUnknownValues)\r\n          }\r\n          // only take conjugation from inflection if lemma has a part of speech and its the same as the inflection\r\n          if (!lemma.features[Models.Feature.types.conjugation] &&\r\n            (!lemma.features[Models.Feature.types.part] || lemma.features[Models.Feature.types.part].isEqual(inflection[Models.Feature.types.part]))) {\r\n            mappingData.mapFeature(lemma, inflectionJSON, 'conj', 'conjugation', this.config.allowUnknownValues)\r\n          }\r\n        }\r\n      }\r\n      for (let lex of lexemeSet) {\r\n        // only process if we have a lemma that differs from the target\r\n        // word or if we have at least a part of speech\r\n        if (mappingData.reportLexeme(lex)) {\r\n          lex.inflections = inflections\r\n          lexemes.push(lex)\r\n        }\r\n      }\r\n    }\r\n    if (lexemes.length > 0) {\r\n      return new Models.Homonym(lexemes, targetWord)\r\n    } else {\r\n      return undefined\r\n    }\r\n  }\r\n\r\n  async getHomonym (lang, word) {\r\n    let jsonObj = await this.fetch(lang, word)\r\n    if (jsonObj) {\r\n      let homonym = this.transform(jsonObj, word)\r\n      homonym.lexemes.sort(Models.Lexeme.getSortByTwoLemmaFeatures(Models.Feature.types.frequency, Models.Feature.types.part))\r\n      return homonym\r\n    } else {\r\n      // No data found for this word\r\n      return undefined\r\n    }\r\n  }\r\n}\r\n\r\nexport default AlpheiosTuftsAdapter\r\n","import ImportData from '../lib'\r\nimport * as Models from 'alpheios-data-models'\r\n\r\nlet data = new ImportData(Models.ArabicLanguageModel, 'aramorph')\r\n\r\nexport default data\r\n","import Cupidinibus from './latin_noun_cupidinibus.json'\r\nimport Mare from './latin_noun_adj_mare.json'\r\nimport Cepit from './latin_verb_cepit.json'\r\nimport Pilsopo from './greek_noun_pilsopo.json'\r\n\r\nclass WordTestData {\r\n  constructor () {\r\n    this._words = {\r\n      'cupidinibus': Cupidinibus,\r\n      'mare': Mare,\r\n      'cepit': Cepit,\r\n      'φιλόσοφος': Pilsopo\r\n    }\r\n  }\r\n\r\n  get (word) {\r\n    if (this._words.hasOwnProperty(word)) {\r\n      return this._words[word]\r\n    }\r\n    throw new Error(`Word \"${word}\" does not exist in test data`)\r\n  }\r\n}\r\nexport default WordTestData\r\n","import ImportData from '../lib'\r\nimport * as Models from 'alpheios-data-models'\r\n\r\nlet data = new ImportData(Models.PersianLanguageModel, 'hazm')\r\n\r\n// hazm allow all lemmas in without respect features as all we use it for is lemmatizing\r\ndata.setLexemeFilter(function (lexeme) { return Boolean(lexeme.lemma.word) })\r\n\r\nexport default data\r\n","import ImportData from '../lib'\r\nimport * as Models from 'alpheios-data-models'\r\n\r\nlet data = new ImportData(Models.GreekLanguageModel, 'morpheusgrc')\r\n\r\n/*\r\nBelow are value conversion maps for each grammatical feature to be parsed.\r\nFormat:\r\ndata.addFeature(typeName).add(providerValueName, LibValueName);\r\n(functions are chainable)\r\nTypes and values that are unknown (undefined) will be skipped during parsing.\r\n */\r\n\r\ndata.addFeature(Models.Feature.types.gender).importer\r\n  .map('masculine feminine', [[Models.Constants.GEND_MASCULINE, 1], [Models.Constants.GEND_FEMININE, 2]])\r\n\r\ndata.addFeature(Models.Feature.types.declension).importer\r\n  .map('1st & 2nd', [[Models.Constants.ORD_1ST, 1], [Models.Constants.ORD_2ND, 2]])\r\n\r\nexport default data\r\n","import ImportData from '../lib'\r\nimport * as Models from 'alpheios-data-models'\r\n\r\nlet data = new ImportData(Models.LatinLanguageModel, 'whitakerLat')\r\n\r\n/*\r\nBelow are value conversion maps for each grammatical feature to be parsed.\r\nFormat:\r\ndata.addFeature(typeName).add(providerValueName, LibValueName);\r\n(functions are chainable)\r\nTypes and values that are unknown (undefined) will be skipped during parsing.\r\n */\r\n\r\n// TODO  - per inflections.xsd\r\n// Whitakers Words uses packon and tackon in POFS, not sure how\r\n\r\ndata.addFeature(Models.Feature.types.gender).importer\r\n  .map('common', [[Models.Constants.GEND_MASCULINE, 1], [Models.Constants.GEND_FEMININE, 2]])\r\n  .map('all', [[Models.Constants.GEND_MASCULINE, 1], [Models.Constants.GEND_FEMININE, 2], [Models.Constants.GEND_NEUTER, 3]])\r\n\r\ndata.addFeature(Models.Feature.types.tense).importer\r\n  .map('future_perfect', Models.Constants.TENSE_FUTURE_PERFECT)\r\n\r\ndata.setLemmaParser(function (lemma) {\r\n  // Whitaker's Words returns principal parts for some words\r\n  // and sometimes has a space separted stem and suffix\r\n  let parsed, primary\r\n  let parts = []\r\n  let lemmas = lemma.split(', ')\r\n  for (let [index, l] of lemmas.entries()) {\r\n    let normalized = l.split(' ')[0]\r\n    if (index === 0) {\r\n      primary = normalized\r\n    }\r\n    parts.push(normalized)\r\n  }\r\n  if (primary) {\r\n    parsed = new Models.Lemma(primary, this.model.languageCode, parts)\r\n  }\r\n\r\n  return parsed\r\n})\r\n\r\nexport default data\r\n","/*\r\nObjects of a morphology analyzer's library\r\n */\r\nimport { Feature, Lemma, FeatureImporter } from 'alpheios-data-models'\r\n\r\n/**\r\n * Holds all information required to transform from morphological analyzer's grammatical feature values to the\r\n * library standards. There is one ImportData object per language.\r\n */\r\nclass ImportData {\r\n  /**\r\n     * Creates an ImportData object for the language provided.\r\n     * @param {Function<LanguageModel>} model - A language model of the import data.\r\n     * @param {string} engine - engine code\r\n     */\r\n  constructor (model, engine) {\r\n    'use strict'\r\n    this.model = model\r\n    this.engine = engine\r\n    // add all the features that the language supports so that we\r\n    // can return the default values if we don't need to import a mapping\r\n    for (let featureName of Object.keys(this.model.features)) {\r\n      this.addFeature(featureName)\r\n    }\r\n    // may be overridden by specific engine use via setLemmaParser\r\n    this.parseLemma = function (lemma) { return new Lemma(lemma, this.model.languageID) }\r\n    // may be overridden by specific engine use via setPropertyParser - default just returns the property value\r\n    // as a list\r\n    this.parseProperty = function (propertyName, propertyValue) {\r\n      let propertyValues = []\r\n      if (propertyName === 'decl') {\r\n        propertyValues = propertyValue.split('&').map((p) => p.trim())\r\n      } else if (propertyName === 'comp' && propertyValue === 'positive') {\r\n        propertyValues = []\r\n      } else {\r\n        propertyValues = [propertyValue]\r\n      }\r\n      return propertyValues\r\n    }\r\n    // may be overridden by specifc engine use via setLexemeFilter - default assumes we will have a part of speech\r\n    this.reportLexeme = function (lexeme) {\r\n      return lexeme.lemma.features[Feature.types.part]\r\n    }\r\n  }\r\n\r\n  /**\r\n     * Adds a grammatical feature whose values to be mapped.\r\n     * @param {string} featureName - A name of a grammatical feature (i.e. declension, number, etc.)\r\n     * @return {Object} An object that represent a newly created grammatical feature.\r\n     */\r\n  addFeature (featureName) {\r\n    this[featureName] = {}\r\n    let model = this.model\r\n\r\n    this[featureName].add = function add (providerValue, alpheiosValue) {\r\n      this[providerValue] = alpheiosValue\r\n      return this\r\n    }\r\n\r\n    this[featureName].get = function get (providerValue, sortOrder = 1, allowUnknownValues = false) {\r\n      let mappedValue = []\r\n      if (!this.importer.has(providerValue)) {\r\n        // if the providerValue matches the model value or the model value\r\n        // is unrestricted, return a feature with the providerValue and order\r\n        if (model.typeFeature(featureName).hasValue(providerValue) ||\r\n            model.typeFeature(featureName).valuesUnrestricted) {\r\n          mappedValue = model.typeFeature(featureName).createFeature(providerValue, sortOrder)\r\n        } else {\r\n          let message = `Unknown value \"${providerValue}\" of feature \"${featureName}\" for ${model.languageCode} (allowed = ${allowUnknownValues})`\r\n          if (allowUnknownValues) {\r\n            console.log(message)\r\n            mappedValue = model.typeFeature(featureName).createFeature(providerValue, sortOrder)\r\n          } else {\r\n            throw new Error(message)\r\n          }\r\n        }\r\n      } else {\r\n        let tempValue = this.importer.get(providerValue)\r\n        if (Array.isArray(tempValue)) {\r\n          mappedValue = model.typeFeature(featureName).createFeatures(tempValue, sortOrder)\r\n        } else {\r\n          mappedValue = model.typeFeature(featureName).createFeature(tempValue, sortOrder)\r\n        }\r\n      }\r\n      return mappedValue\r\n    }\r\n\r\n    /**\r\n     * @param {Object[]} data - An array of objects with `providerData` (an item value) and `sortOrder` fields\r\n     * @param allowUnknownValues\r\n     * @return {Feature}\r\n     */\r\n    this[featureName].getMultiple = function get (data, allowUnknownValues = false) {\r\n      let values = [] // Converts values from `data` into `values` array\r\n      for (const item of data) {\r\n        if (this.importer.has(item.providerValue)) {\r\n          let value = this.importer.get(item.providerValue)\r\n          if (Array.isArray(value)) {\r\n            // if the import returns an array, it should already have the sortOrder\r\n            values = value\r\n          } else {\r\n            values = [[value, item.sortOrder]]\r\n          }\r\n        } else if (model.typeFeature(featureName).hasValue(item.providerValue) ||\r\n          model.typeFeature(featureName).valuesUnrestricted) {\r\n          values.push([item.providerValue, item.sortOrder])\r\n        } else {\r\n          let message = `Unknown value \"${item.providerValue}\" of feature \"${featureName}\" for ${model.languageCode} (allowed = ${allowUnknownValues})`\r\n          if (allowUnknownValues) {\r\n            console.log(message)\r\n            values.push([item.providerValue, item.sortOrder])\r\n          } else {\r\n            throw new Error(message)\r\n          }\r\n        }\r\n      }\r\n      return model.typeFeature(featureName).createFeatures(values)\r\n    }\r\n\r\n    this[featureName].importer = new FeatureImporter()\r\n\r\n    return this[featureName]\r\n  }\r\n\r\n  /**\r\n   * Add an engine-specific lemma parser\r\n   */\r\n  setLemmaParser (callback) {\r\n    this.parseLemma = callback\r\n  }\r\n\r\n  /**\r\n   * Add an engine-specific property parser\r\n   */\r\n  setPropertyParser (callback) {\r\n    this.parseProperty = callback\r\n  }\r\n\r\n  /**\r\n   * Add an engine-specific lexeme filter\r\n   */\r\n  setLexemeFilter (callback) {\r\n    this.reportLexeme = callback\r\n  }\r\n\r\n  /**\r\n   * Maps property of a single feature type to a single Feature object with one or more values\r\n   * (if this feature has multiple values). Feature is stored as a property of the supplied model object.\r\n   * @param {object} model the model object to which the feature will be added\r\n   * @param {object} inputElem the input data element\r\n   * @param {object} inputName the  property name in the input data\r\n   * @param {string} featureName the name of the feature it will be mapped to\r\n   * @param {boolean} allowUnknownValues flag to indicate if unknown values are allowed\r\n   */\r\n  mapFeature (model, inputElem, inputName, featureName, allowUnknownValues) {\r\n    let values = []\r\n    let inputItem = inputElem[inputName]\r\n    if (inputItem) {\r\n      if (Array.isArray(inputItem)) {\r\n        // There are multiple values of this feature\r\n        for (let e of inputItem) {\r\n          values.push(...this.parseProperty(inputName, e.$))\r\n        }\r\n      } else {\r\n        values = this.parseProperty(inputName, inputItem.$)\r\n      }\r\n      // `values` is always an array as an array is a return value of `parseProperty`\r\n    }\r\n    if (values.length > 0) {\r\n      // There are some values found\r\n      values = values.map(v => { return { providerValue: v, sortOrder: inputItem.order ? inputItem.order : 1 } })\r\n      let feature = this[Feature.types[featureName]].getMultiple(values, allowUnknownValues)\r\n      model.addFeature(feature)\r\n    }\r\n  }\r\n}\r\nexport default ImportData\r\n","module.exports = __WEBPACK_EXTERNAL_MODULE_alpheios_data_models__;"],"sourceRoot":""}