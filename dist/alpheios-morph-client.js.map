{"version":3,"file":"alpheios-morph-client.js","sources":["../src/base_adapter.js"],"sourcesContent":["/**\n * Base Adapter Class for a Morphology Service Client\n */\nclass BaseAdapter {\n  /**\n   * Method which is used to prepare a lookup request according\n   * to the adapter specific logic\n   * @param {string} lang - the language code\n   * @param {string} word - the word to lookup\n   * @returns {string} the url for the request\n   */\n  prepareRequestUrl (lang, word) {\n      /** must be overridden in the adapter implementation class **/\n    return null\n  }\n\n  /**\n   * Fetch response from a remote URL\n   * @param {string} lang - the language code\n   * @param {string} word - the word to lookup\n   * @returns {Promise} a promse which if successful resolves to json response object\n   *                    with the results of the analysis\n   */\n  fetch (lang, word) {\n    let url = this.prepareRequestUrl(lang, word)\n    return new Promise((resolve, reject) => {\n      if (url) {\n        window.fetch(url).then(\n            function (response) {\n              let json = response.json()\n              resolve(json)\n            }\n          ).catch((error) => {\n            reject(error)\n          }\n        )\n      } else {\n        reject(new Error(`Unable to prepare parser request url for ${lang}`))\n      }\n    })\n  }\n\n  /**\n   * Fetch test data to test the adapter\n   * @param {string} lang - the language code\n   * @param {string} word - the word to lookup\n   * @returns {Promise} a promse which if successful resolves to json response object\n   *                    with the test data\n   */\n  fetchTestData (lang, word) {\n    return new Promise((resolve, reject) => {\n      try {\n        let data = {}\n        resolve(data)\n      } catch (error) {\n        reject(error)\n      }\n    })\n  }\n\n  /**\n   * A function that maps a morphological service's specific data types and values into an inflection library standard.\n   * @param {object} jsonObj - A JSON data from the fetch request\n   * @param {object} targetWord - the original target word of the analysis\n   * @returns {Homonym} A library standard Homonym object.\n   */\n  transform (jsonObj, targetWord) {\n    return {}\n  }\n}\n\nexport default BaseAdapter\n"],"names":[],"mappings":"AAAA;;;AAGA,MAAM,WAAW,CAAC;;;;;;;;EAQhB,iBAAiB,CAAC,CAAC,IAAI,EAAE,IAAI,EAAE;;IAE7B,OAAO,IAAI;GACZ;;;;;;;;;EASD,KAAK,CAAC,CAAC,IAAI,EAAE,IAAI,EAAE;IACjB,IAAI,GAAG,GAAG,IAAI,CAAC,iBAAiB,CAAC,IAAI,EAAE,IAAI,EAAC;IAC5C,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,KAAK;MACtC,IAAI,GAAG,EAAE;QACP,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,IAAI;YAClB,UAAU,QAAQ,EAAE;cAClB,IAAI,IAAI,GAAG,QAAQ,CAAC,IAAI,GAAE;cAC1B,OAAO,CAAC,IAAI,EAAC;aACd;WACF,CAAC,KAAK,CAAC,CAAC,KAAK,KAAK;YACjB,MAAM,CAAC,KAAK,EAAC;WACd;UACF;OACF,MAAM;QACL,MAAM,CAAC,IAAI,KAAK,CAAC,CAAC,yCAAyC,EAAE,IAAI,CAAC,CAAC,CAAC,EAAC;OACtE;KACF,CAAC;GACH;;;;;;;;;EASD,aAAa,CAAC,CAAC,IAAI,EAAE,IAAI,EAAE;IACzB,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,KAAK;MACtC,IAAI;QACF,IAAI,IAAI,GAAG,GAAE;QACb,OAAO,CAAC,IAAI,EAAC;OACd,CAAC,OAAO,KAAK,EAAE;QACd,MAAM,CAAC,KAAK,EAAC;OACd;KACF,CAAC;GACH;;;;;;;;EAQD,SAAS,CAAC,CAAC,OAAO,EAAE,UAAU,EAAE;IAC9B,OAAO,EAAE;GACV;CACF;;;;"}